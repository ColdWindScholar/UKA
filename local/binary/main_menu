#!/system/bin/sh
program_version="5.14"
clear
local_dir="/data/local"
binary_dir="$local_dir/binary"

export PATH=$binary_dir:$PATH
#############################
cd "$local_dir/Unpacker_lang"
if [ -z $(cat ./selection.txt) ]; then
  v=$(find . -maxdepth 1 -iname '*.lang' -type f 2>/dev/null | busybox sed 's!./!!;s!.lang!!' | sort)
  set -- $v
  if [ ! -z "$v" ]; then
    echo
    echo "Please select a language:"
    echo
    select menu in $v; do
      case $REPLY in
      [1-9] | [1-9][0-9])
        i="$#"
        let i=i+1
        sel_lang=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
        echo $sel_lang >$local_dir/Unpacker_lang/selection.txt
        eval "$(cat "$local_dir/Unpacker_lang/$sel_lang.lang")"
        clear
        break
        ;;
      esac
    done
  else
    return
  fi
else
  eval "$(cat "$local_dir/Unpacker_lang/$(cat ./selection.txt).lang")"
fi
select_lang() {
  cd "$local_dir/Unpacker_lang"
  v=$(find . -maxdepth 1 -iname '*.lang' -type f 2>/dev/null | busybox sed 's!./!!;s!.lang!!' | sort)
  set -- $v
  if [ ! -z "$v" ]; then
    echo
    echo "Please select a language:"
    echo
    select menu in $v; do
      case $REPLY in
      [1-9] | [1-9][0-9])
        i="$#"
        let i=i+1
        sel_lang=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
        echo $sel_lang >$local_dir/Unpacker_lang/selection.txt
        eval "$(cat "$local_dir/Unpacker_lang/$sel_lang.lang")"
        clear
        main_menu
        break
        ;;
      esac
    done
  else
    return
  fi
}

error_select_menu() {
  if [ "$1" -eq "1" ]; then
    clear
    echo
    echo "      $menu_anykey"
    echo
  else
    echo "$anykey"
  fi
}

############################

$binary_dir/lib/busybox find $local_dir/UnpackerSystem/gen_keys -maxdepth 1 -empty -exec busybox rm -rf {} \; 2>/dev/null
$binary_dir/lib/busybox find $local_dir/UnpackerSystem/extract_keys -maxdepth 1 -empty -exec busybox rm -rf {} \; 2>/dev/null

config="config/$pack_d"

free_place() {
  unset get_size
  unset get_size_print
  echo
  echo
  echo ".....Введите желаемый размер свободного места для собираемого образа, в мегабайтах:"
  echo
  read a && set -- "$a"
  if [ $(echo $?) -eq 0 ]; then
    if busybox test "$(busybox expr "$a" \* "1" 2>/dev/null)"; then
      get_size="$(busybox expr "$a" \* 1024 \* 1024 / 4096 \* 4096)"
      get_size_print="$a"
      set -- "$get_size"
    else
      get_size="0"
      get_size_print="0"
      set -- "$get_size"
    fi
  else
    echo
    echo ".....$error!"
    echo
  fi
  clear
  echo
  echo ".....Установлен желаемый размер свободного места для собираемого образа ~ "$get_size_print" mb"
  echo
  return
}

nn1() {
  echo
  echo "     Выбор папки сохранения образа    "
  echo "     -----------------------------    "
  echo
  echo ".....При вводе 0, папка сохранения: $local_dir/UnpackerSuper/output"
  echo ".....При вводе 1, папка сохранения: $local_dir/UnpackerSuper"
  echo ".....Введите 0, 1, или свой путь к папке сохранения образа..."
  echo
  read h && if [ "$h" = "0" ]; then
    outdir=$local_dir/UnpackerSystem
    set -- $outdir

    clear
    echo
    echo "     Установлена папка сохранения выходного образа:"
    echo "     $outdir"
  elif [ "$h" = "1" ]; then
    outdir=$local_dir/UnpackerSuper
    set -- $outdir

    clear
    echo
    echo "     Установлена папка сохранения выходного образа:"
    echo "     $outdir"
  elif [ -d "$h" ]; then
    outdir=$h
    set -- $outdir

    clear
    echo
    echo "     Установлена папка сохранения выходного образа:"
    echo "     $outdir"
  else
    clear
    echo
    echo ".....Папки сохранения не существует!"
    nn
    return
  fi
  return
}

inf_space_menu() {
  free_space="$(busybox df -h "$outdir" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
  echo "    В папке свободно: "$free_space""
  return
}

nn() {
  echo
  echo "     Выбор папки сохранения образа    "
  echo "     -----------------------------    "
  echo
  echo ".....При вводе 0, папка сохранения: $local_dir/UnpackerSystem"
  echo ".....Введите 0, или свой путь к папке сохранения образа..."
  echo
  read h && if [ "$h" = "0" ]; then
    outdir=$local_dir/UnpackerSystem
    set -- $outdir
    mkdir "$outdir" 2>/dev/null

    clear
    echo
    echo "    Установлена папка сохранения выходного образа:"
    echo "    $outdir"
    inf_space_menu
  elif [ -d "$h" -o -d /"$h" -a ! -z "$h" ]; then
    outdir=/"$(echo "$h" | busybox sed 's!^/!!')"
    set -- $outdir
    make_ext4fs -l 10485760 "$outdir"/testuka >/dev/null
    if busybox test -s "$outdir"/testuka; then

      clear
      echo
      echo "    Установлена папка сохранения выходного образа:"
      set -- $outdir
      echo "    $outdir"
      inf_space_menu
      busybox rm -f "$outdir"/testuka 2>/dev/null
    else
      clear
      echo
      echo "    \"$outdir\" недоступен для сохранения образа!"
      echo
      echo "    Установлена папка сохранения выходного образа:"
      outdir=$local_dir/UnpackerSystem
      set -- $outdir
      mkdir "$outdir" 2>/dev/null
      echo "    $outdir"
      inf_space_menu
      busybox rm -f "$outdir"/testuka 2>/dev/null
    fi
  else
    clear
    echo
    echo "....Внимание! Папки сохранения не существует!"
    echo
    echo "    Установлена папка сохранения выходного образа:"
    outdir=$local_dir/UnpackerSystem
    set -- $outdir
    mkdir "$outdir" 2>/dev/null
    echo "    $outdir"
    inf_space_menu
    return
  fi
  return
}

nnnnn() {
  echo
  echo "     Выбор папки сохранения образа    "
  echo "     -----------------------------    "
  echo
  echo ".....При вводе 0, папка сохранения: $local_dir/UnpackerSystem"
  echo ".....Введите 0, или свой путь к папке сохранения образа..."
  echo
  read h && if [ "$h" = "0" ]; then
    outdir=$local_dir/UnpackerSystem
    set -- $outdir

    clear
    echo
    echo "     Установлена папка сохранения выходного образа:"
    echo "     $outdir"
  elif [ -d "$h" -o -d /"$h" ]; then
    outdir=/"$(echo "$h" | busybox sed 's!^/!!')"
    set -- $outdir
    make_ext4fs -l 10485760 "$outdir"/testuka >/dev/null
    if busybox test -s "$outdir"/testuka; then

      clear
      echo
      echo "     Установлена папка сохранения выходного образа:"
      set -- $outdir
      echo "     $outdir"
      busybox rm -f "$outdir"/testuka 2>/dev/null
    else
      clear
      echo
      echo "    \"$outdir\" недоступен для сохранения образа!"
      echo
      echo "    Установлена папка сохранения выходного образа:"
      outdir=$local_dir/UnpackerSystem
      set -- $outdir
      echo "    $outdir"
      busybox rm -f "$outdir"/testuka 2>/dev/null
    fi
  else
    outdir="$h"
    set -- $outdir

    clear
    echo
    echo ".....Error! Папки сохранения не существует!"
    nnnnn
    return
  fi
  return
}

check_status() {
  make_ext4fs -s -J -T -1 -l "$i" -a /"$pack_d" tmp.img "$pack_d" &>/dev/null
  if [ $(echo $?) -eq 0 ]; then
    gg=1
    return
  else
    gg=0
    return
  fi
  return
}

check_size_img() {
  echo
  echo ".....Определение размера для сборки..."
  echo
  i="$(busybox expr $(busybox du -s "$pack_d" | busybox awk '{ print $1 }') \* 1024)"
  while check_status; do
    if [ "$gg" -eq 1 ]; then
      if busybox test -s "$config"/"$pack_d"_avb.img; then
        c="$(avbtool add_hashtree_footer --partition_size "$i" --do_not_generate_fec --calc_max_image_size)"
        v="$(avbtool add_hashtree_footer --partition_size "$c" --do_not_generate_fec --calc_max_image_size)"

        until busybox test "$i" -lt "$v"; do
          v="$(busybox expr "$v" \+ "$get_add")"
          c="$(busybox expr "$c" \+ "$get_add")"
        done
        size_new="$(busybox expr "$c" / 4096 \* 4096 \+ "$get_size")"
      else
        size_new="$(busybox expr "$i" / 4096 \* 4096 \+ "$get_size")"
      fi
      busybox rm -f tmp.img
      break
    else
      i="$(busybox expr "$i" \+ "$get_add")"
    fi
  done
  return
}

ext_check() {
  file_ext="$1"
  if [ ! -z "$(busybox hexdump -C -n 20000 "$file_ext" | busybox grep -Eo '3a ff 26 ed|30 50 4c 41|4d 4f 54 4f|e2 e1 f5 e0' 2>/dev/null)" -o ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" -o ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox grep -o "[.]cms" 2>/dev/null)" ]; then
    return 0
  else
    return 1
  fi
  return
}

ext_checkkk() {
  file_ext="$1"
  if [ ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox grep '3a ff 26 ed')" -o ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" -o ! -z "$(busybox hexdump -C -n 20000 "$file_ext" | busybox grep -o "30 50 4c 41")" -o ! -z "$(busybox hexdump -C -n 20000 "$file_ext" | busybox grep -o "4d 4f 54 4f" 2>/dev/null)" -o ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox grep -o "[.]cms" 2>/dev/null)" ]; then
    return 0
  else
    return 1
  fi
  return
}

ext_check_super() {
  file_ext="$1"
  if [ ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox grep '3a ff 26 ed')" -o ! -z "$(busybox hexdump -C -n 2000 "$file_ext" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" ]; then
    return 0
  else
    return 1
  fi
  return
}

check_mount() {
  [ -z "$(busybox mount | busybox grep "$local_dir" | busybox grep -vi "AIK")" ] && return 0 || return 1
}

my_size_add() {
  clear
  real_size_orig="$(cat "$config"/"$pack_d"_size.txt)"
  real_size_orig_mb=$(busybox expr "$real_size_orig" / 1024 / 1024)
  echo
  echo ".....Оригинальный размер образа ~ "$real_size_orig_mb" mb"
  echo ".....Введите размер в mb, который хотите добавить к образу:"
  echo
  read a && set -- "$a"
  if [ $(echo $?) -eq 0 ]; then
    size_add=$(busybox expr "$a" \* 1024 \* 1024 / 4096 \* 4096)
    r_size=$(busybox expr "$real_size_orig" + "$size_add")
    real_size=$(busybox expr "$r_size" / 1024 / 1024)
    set -- "$r_size"

    fff_add
    return
    echo
  else
    echo
    echo ".....Ошибка!"
    echo
    my_size_add
    return
  fi
  return
}

fff_add() {
  clear
  if [ "$r_size" != 0 ]; then
    echo
    echo "...Оригинальный размер образа ~ "$real_size_orig_mb" mb"
    echo "...Собрать образ с размером ~ ${real_size} mb?"
    echo
  fi
  select img in "Да" "Нет, ввести другой размер" "$exit_main_menu"; do
    case $REPLY in
    1)
      set -- "$r_size"
      if [ ! -s "$config"/"$pack_d"*_avb.img ]; then
        busybox sed -e "s!-l [0-9]*!-l "$r_size"!" $file_sh >"$config"/"$pack_d"_gsize.sh
      fi
      . $file_size
      main_menu
      break
      ;;
    2)
      clear
      my_size_add
      return
      break
      ;;
    3)
      clear
      main_menu
      return
      break
      ;;
    *)
      error_select_menu 1
      fff_add
      return
      break
      ;;
    esac
  done
  return
}

my_size() {
  clear
  echo
  echo ".....Введите размер в байтах:"
  echo
  read a && set -- "$a"
  if [ $(echo $?) -eq 0 ]; then
    r_size=$(busybox expr "$a" / 4096 \* 4096)
    set -- "$r_size"

    fff
    return
    echo
  else
    echo
    echo ".....Ошибка!"
    echo
    my_size
    return
  fi
  return
}

fff() {
  clear
  if [ "$a" = "$r_size" ]; then
    echo
    echo "...Собрать образ с размером: $r_size байт?"
    echo
  else
    echo
    echo "...Введённый размер не кратен \"4096\", собрать образ с размером: $r_size байт?"
    echo
  fi
  select img in "Да" "Нет, ввести другой размер" "$exit_main_menu"; do
    case $REPLY in
    1)
      set -- "$r_size"
      if [ ! -s "$config"/"$pack_d"*_avb.img ]; then
        busybox sed -e "s!-l [0-9]*!-l "$r_size"!" $file_sh >"$config"/"$pack_d"_gsize.sh
      fi
      . $file_size
      main_menu
      break
      ;;
    2)
      clear
      my_size
      return
      break
      ;;
    3)
      clear
      main_menu
      return
      break
      ;;
    *)
      error_select_menu 1
      fff
      return
      break
      ;;
    esac
  done
  return
}

pack_dat() {
  cd $local_dir/UnpackerSystem
  dir=$binary_dir
  d=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | sed 's!./!!'); do
    if [ -f "config/"$a"/"$a"_file_contexts" ]; then
      echo "$a"
    fi
  done)

  set -- $d

  if [ ! -z "$d" ]; then
    echo
    echo ".....$select_build_folder:"
    echo
    select menu in $d "$exit_main_menu"; do
      case $REPLY in
      [1-9]*)
        i="$#"

        let i=i+1

        file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
        if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
          clear
          pack_d="$file"
          config="config/$pack_d"

          size=100
          . $file_size
          main_menu
          return
          break
        elif [ "$REPLY" -eq "$i" ]; then
          clear
          main_menu
          return
          break
        else
          error_select_menu 1
          pack_dat
          return
          break
        fi
        break
        ;;
      *)
        error_select_menu 1
        pack_dat
        return
        break
        ;;
      esac
    done
  else
    clear
    echo
    echo ....."В \"$PWD\" $no_build_folders_available."
    echo
    main_menu
    return
  fi
  return
}

pack_dat_my() {
  cd $local_dir/UnpackerSystem
  dir=$binary_dir
  d=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
    if [ -f "config/"$a"/"$a"_file_contexts" ]; then
      echo "$a"
    fi
  done)
  set -- $d
  if [ ! -z "$d" ]; then
    echo
    echo ".....$select_build_folder:"
    echo
    select menu in $d "$exit_main_menu"; do
      case $REPLY in
      [1-9]*)
        i="$#"

        let i=i+1

        file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
        if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
          clear
          pack_d="$file"
          config="config/$pack_d"

          size=111
          set -- $size
          if [ -f ./"$config"/"$pack_d"*_avb.img ]; then
            file_sh=./"$config"/"$pack_d"*_pack_avb_sparse.sh
          else
            file_sh=./"$config"/"$pack_d"*_pack_sparse.sh
          fi
          if [ "$size_add" == "1" ]; then
            my_size_add
          else
            my_size
          fi
          return

          main_menu
          return
          break
        elif [ "$REPLY" -eq "$i" ]; then
          clear
          main_menu
          return
          break
        else
          error_select_menu 1
          pack_dat_my
          return
          break
        fi
        break
        ;;
      *)
        error_select_menu 1
        pack_dat_my
        return
        break
        ;;
      esac
    done
  else
    clear
    echo
    echo ....."В \"$PWD\" $no_build_folders_available."
    echo
    main_menu
    return
  fi
  return
}

pack_dat_new() {
  free_place
  cd $local_dir/UnpackerSystem
  dir=$binary_dir
  d=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
    if [ -f "config/"$a"/"$a"_file_contexts" ]; then
      echo "$a"
    fi
  done)

  set -- $d

  if [ ! -z "$d" ]; then
    echo
    echo ".....$select_build_folder:"
    echo
    select menu in $d "$exit_main_menu"; do
      case $REPLY in
      [1-9]*)
        i="$#"

        let i=i+1

        file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
        if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
          clear
          pack_d="$file"
          config="config/$pack_d"

          size_orig="$(busybox expr $(busybox du -s "$pack_d" | busybox awk '{ print $1 }') \* 1024)"
          size_real="$(busybox cat "$config"/"$pack_d"_size.txt)"
          if busybox test "$size_orig" -le "10485760"; then
            get_add="8192"
            check_size_img
          else
            get_add="1048576"
            check_size_img
          fi
          size=111
          set -- $size
          r_size="$size_new"
          set -- $r_size
          if busybox test -s ./"$config"/"$pack_d"*_avb.img; then
            file_sh=./"$config"/"$pack_d"*_pack_avb_sparse.sh
          else
            file_sh=./"$config"/"$pack_d"*_pack_sparse.sh
            busybox sed -e "s!-l [0-9]*!-l "$r_size"!" $file_sh >"$config"/"$pack_d"_gsize.sh
          fi
          . $file_size
          main_menu
          return
          break
        elif [ "$REPLY" -eq "$i" ]; then
          clear
          main_menu
          return
          break
        else
          error_select_menu 1
          pack_dat_new
          return
          break
        fi
        break
        ;;
      *)
        error_select_menu 1
        pack_dat_new
        return
        break
        ;;
      esac
    done
  else
    clear
    echo
    echo ....."В \"$PWD\" $no_build_folders_available."
    echo
    main_menu
    return
  fi
  return
}

main_menu() {
  echo -en "\E[32;1m"
  MENU=(
    "$menu_01"
    "$menu_02"
    "$menu_03"
    "$menu_04"
    "$menu_05"
    "$menu_06"
    "$menu_07"
    "$menu_08"
    "$menu_09"
    "$menu_10"
    "$menu_11"
    "$menu_12"
    "$menu_13"
    "$menu_14"
    "$close_program"
  )
  echo
  echo "               $menu_menu"
  echo "               $menu_version" "$program_version"
  echo "---------------------------------------------------------"
  echo
  echo "$menu_enter"
  echo
  echo -en "\E[37;1m"

  select menu in "${MENU[@]}"; do
    case $REPLY in
    1)
      clear
      my1() {
        echo -en "\E[32;1m"
        echo
        echo "      $menu_01"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        echo "     $put boot.img $in_folder2: $local_dir/UnpackerContexts"
        echo
        select img in "$extract file_contexts" "$converting file_contexts(txt) -> file_contexts(bin)(версия:8.38)" "$setting_configuration" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            bootext
            main_menu
            break
            ;;
          2)
            clear
            cd $local_dir/UnpackerContexts
            if [ -f ./file_contexts ]; then
              $dir/sefcontext_compile -o ./file_contexts_new.bin ./file_contexts
              if [ $(echo $?) -eq 0 ]; then
                echo
                echo ".....$successfully_created file_contexts_new.bin!"
                echo
              else
                echo
                echo ".....$convert_error!"
                echo
              fi
            else
              echo
              echo ".....$file_not_found: file_contexts!"
              echo
            fi
            cd
            main_menu
            break
            ;;
          3)
            clear
            $binary_dir/install_sef.sh
            main_menu
            break
            ;;
          4)
            clear
            main_menu
            break
            ;;
          5)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
      }
      my1
      break
      ;;
    2)
      clear
      my_aik() {
        if [ -d $local_dir/AIK-mobile ]; then
          cd $local_dir/AIK-mobile
          echo -en "\E[32;1m"
          echo
          echo "      $menu_02"
          echo "---------------------------------------------------------"
          echo
          echo -en "\E[37;1m"
          echo "    $put boot.img $in_folder2: $local_dir/AIK-mobile"
          echo
          select img in "$unpack boot(recovery)" "$pack boot(recovery)" "$del AVB/dm-verity" "$patch boot.img(32bit, SAR) $for magisk" "$cleaning_working_folder: $local_dir/AIK-mobile" "$complete_removal AIK-mobile $from_phone" "$exit_main_menu" "$close_program"; do
            case $REPLY in
            1)
              clear
              my_sel_boot() {
                aik_avb() {
                  avb_file="$1"
                  avb_dir=$local_dir/AIK-mobile/split_img
                  if [ -d "$avb_dir" ]; then
                    avb_full="$(avbtool info_image --image "$avb_file" 2>"$avb_dir"/avb.log)"
                    if [ ! -z "$(echo "$avb_full" | busybox grep -o "Image size:")" ]; then

                      echo "$avb_full" | busybox awk '/Partition Name:/ { print $3 }' >"$avb_dir"/part_name.txt
                      echo "$avb_full" >"$avb_dir"/avb.img
                      echo "$avb_full" | busybox awk '/Image size:/ { print $3 }' | busybox head -1 >"$avb_dir"/avb_size.txt
                      echo
                      echo ".....$find_struct"
                    fi
                  fi
                  return
                }
                cd $local_dir/AIK-mobile
                b=$(busybox find . -maxdepth 1 -name '*.img' -o -name '*.sin' -o -name '*.elf' -o -name '*.bin' -o -name '*.lz4' -type f)

                set -- $b

                if [ ! -z "$b" ]; then
                  echo
                  echo ".....$sel_file_extract:"
                  echo
                  select menu in $b "$menu_02_exit_in_menu: AIK-mobile"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        outfile=$(echo "$file" | busybox awk -F".lz4" '{ print $1 }')
                        if [ ! -z "$(echo "$file" | busybox grep -o '.lz4$')" ]; then
                          lz4 -df "$file"
                          ./unpackimg.sh "$outfile" && aik_avb "$outfile"

                        elif
                          [ ! -z "$(echo "$file" | busybox grep ".sin$")" ]
                        then
                          name_sin="$(echo "$file" | busybox sed 's!\.sin$!!')"
                          sony_dump "$PWD" "$file" | tee "$name_sin"_sin.log

                          if [ $(echo $?) -eq 0 ]; then
                            [ -f "$name_sin"_sin.log ] && u="$(busybox cat "$name_sin"_sin.log | busybox awk '/Extracting file/ { print $3 }' | busybox tail -1)"
                            num=${u##*/}
                            busybox mv -f "$num" "$name_sin"_sin.img && ./unpackimg.sh "$name_sin"_sin.img && aik_avb "$name_sin"_sin.img

                          fi

                        else
                          ./unpackimg.sh "$file" && aik_avb "$file"
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        my_aik
                        return
                        break
                      else
                        error_select_menu 1
                        my_sel_boot
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my_sel_boot
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."$in_folder_no_files_unpuck"
                  echo
                  my_aik
                  return
                fi
                return
              }
              my_sel_boot
              break
              my_aik
              break
              ;;
            2)
              clear
              aik_pack() {
                pack_file="$1"
                avb_dir=$local_dir/AIK-mobile/split_img
                if busybox test -s "$avb_dir"/avb.img; then
                  size_orig="$(busybox cat "$avb_dir"/avb_size.txt)"
                  part_name="$(busybox cat "$avb_dir"/part_name.txt)"
                  prop_avb="$(busybox cat "$avb_dir"/avb.img | busybox awk '/    Prop:/ { print "--prop"" "$2":"$4 }' | tr '\n' ' ')"
                  check_alg="$(busybox cat "$avb_dir"/avb.img | busybox awk '/^Algorithm:/ { print $2 }')"
                  if [ "$check_alg" != "NONE" -a ! -z "$check_alg" ]; then
                    case "$check_alg" in
                    "SHA256_RSA2048")
                      sign_file="--key $binary_dir/testkey_rsa2048.pem"
                      sign_print="--algorithm $check_alg"
                      ;;
                    "SHA256_RSA4096")
                      sign_file="--key $binary_dir/testkey_rsa4096.pem"
                      sign_print="--algorithm $check_alg"
                      ;;

                    "SHA256_RSA8192")
                      sign_file="--key $binary_dir/testkey_rsa8192.pem"
                      sign_print="--algorithm $check_alg"
                      ;;
                    esac
                  fi
                  echo "avbtool add_hash_footer --image "$pack_file" --partition_size "$size_orig" "$prop_avb"--partition_name "$part_name" "$sign_print" "$sign_file"" >"$avb_dir"/avb.sh
                  chmod 755 "$avb_dir"/avb.sh && "$avb_dir"/avb.sh && busybox rm -f "$avb_dir"/avb.sh
                  if [ $(echo $?) -eq 0 ]; then
                    echo
                    echo ".....$created_min_structure AVB!"
                  else
                    echo
                    echo ".....$error_creating_structure AVB!"
                  fi
                else
                  size_img="$(busybox cat "$avb_dir"/*-origsize 2>/dev/null)"
                  if [ ! -z "$size_img" ]; then

                    size_mb="$(busybox expr "$size_img" / 1024 / 1024)"
                  fi
                  if [ ! -z "$(echo "$size_mb" | busybox grep -Eo "6|16|32|35|40|54|64|96|128")" ]; then
                    size_orig="$(busybox expr "$size_mb" \* 1024 \* 1024)"
                    busybox truncate -s "$size_orig" "$pack_file" 2>/dev/null
                  fi
                fi
                return
              }
              ./repackimg.sh
              if [ -d ./split_img ]; then
                cd $local_dir/AIK-mobile/split_img
                if [ ! -z $(ls | busybox grep -i 'boot' | busybox head -1) ]; then
                  cd ..
                  busybox mv -f ./image-new.img ./boot-output.img && aik_pack ./boot-output.img
                elif [ ! -z $(ls | busybox grep -Ei 'twrp|recovery|cwm' | busybox head -1) ]; then
                  cd ..
                  busybox mv -f ./image-new.img ./recovery-output.img && aik_pack ./recovery-output.img
                else
                  busybox mv -f ./image-new.img ./unknown-output.img && aik_pack ./unknown-output.img
                fi
              fi

              my_aik
              break
              ;;

            3)
              clear
              rr() {
                file="$1"
                busybox rm -rf path
                mkdir path && cd path
                bootpatch unpack ../$file 2>../path_dtb.txt
                if [ "$?" -eq "0" ]; then
                  echo >>../path_dtb.txt
                  clear
                  for file_path in $(busybox find -maxdepth 1 -name "*dtb"); do
                    [ -f $file_path ] && echo
                    echo "...$finding_values_patch_in_file: $(echo $file_path | busybox sed "s!./!!")..." && $binary_dir/bootpatch dtb $file_path patch &>>../path_dtb.txt
                  done
                  if [ ! -z "$(busybox cat ../path_dtb.txt | busybox grep ".*,avb")" ]; then
                    echo >>../path_dtb.txt
                    bootpatch repack ../$file 2>>../path_dtb.txt && busybox cp new-boot.img ../boot_noavb.img && busybox rm -rf ../path
                    echo
                    echo "...$complete $file_received: \"boot_noavb.img\"!"
                    echo
                    main_menu
                    return
                  else
                    echo
                    echo "...$patch_no_value!"
                    echo
                    busybox rm -rf ../path
                    main_menu
                    return
                  fi
                else
                  echo
                  echo "...$unpacking_error!"
                  busybox rm -rf ../path
                  main_menu
                  return
                fi
              }

              clear_dm() {

                cd $local_dir/AIK-mobile
                b=$(busybox find . -maxdepth 1 -name '*.img' -o -name '*.sin' -o -name '*.elf' -o -name '*.bin' -o -name '*.lz4' -type f)

                set -- $b

                if [ ! -z "$b" ]; then
                  echo
                  echo ".....$select_file:"
                  echo
                  select menu in $b "$exit_in_menu: AIK-mobile"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        outfile=$(echo "$file" | busybox awk -F".lz4" '{ print $1 }')
                        if [ ! -z "$(echo "$file" | busybox grep -o '.lz4$')" ]; then
                          lz4 -df "$file"
                          rr "$outfile"
                          return
                        else
                          rr "$file"
                          return
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        my_aik
                        return
                        break
                      else
                        error_select_menu 1
                        clear_dm
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      clear_dm
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ".....$no_files_to_patch"
                  echo
                  my_aik
                  return
                fi
                return
              }
              clear_dm
              break

              my_aik
              break
              ;;
            4)
              clear
              ker_path() {
                cd $local_dir/AIK-mobile
                b=$(busybox find . -maxdepth 1 -name '*.img' -type f)

                set -- $b

                if [ ! -z "$b" ]; then
                  echo
                  echo ".....$select_file:"
                  echo
                  select menu in $b "$exit_in_menu: AIK-mobile"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        ker_name="$(echo "$file" | busybox sed 's!^./!!' | busybox awk -F".img" '{ print $1 }')"
                        file="$ker_name".img
                        file1="$ker_name"_path.img
                        busybox cp -f "$file" "$file1"
                        echo
                        python39 $binary_dir/bin_system/main.py "$file1" 2>ker.txt
                        if [ $(echo $?) -eq 0 ]; then
                          echo
                          echo ".....$successfully_patched $file -> $file1"
                          echo
                        else
                          echo
                          busybox cat ker.txt | busybox grep "Exception:"
                          busybox rm -f "$file1"
                          echo
                        fi
                        busybox rm -f ker.txt
                        my_aik
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        my_aik
                        return
                        break
                      else
                        error_select_menu 1
                        ker_path
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      ker_path
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ".....$no_files_to_patch"
                  echo
                  my_aik
                  return
                fi
                return
              }
              ker_path
              break
              my_aik
              break
              ;;
            5)
              clear
              ./cleanup.sh
              my_aik
              break
              ;;
            6)
              clear
              del_aik() {
                echo
                echo -en "\E[31;47;1m"
                echo "     $del AIK-mobile $from_phone?     "
                echo
                echo -en "\E[37;0m"
                echo -en "\E[37;1m"
                select img in $yes $no "$exit_main_menu"; do
                  case $REPLY in
                  1)
                    clear
                    $local_dir/AIK-mobile/cleanup.sh
                    $local_dir/AIK-mobile/bin/aik --uninstall
                    busybox mount -o rw,remount / 2>/dev/null
                    busybox mount -o rw,remount /system 2>/dev/null
                    busybox find $(echo $PATH | busybox sed 's!:! !g') -name 'aik' -type f | xargs busybox rm -f 2>/dev/null
                    busybox rm -rf $local_dir/AIK-mobile /data/adb/modules/aik-mobile 2>/dev/null

                    if [ $(echo $?) -eq 0 ]; then
                      echo
                      echo "     AIK-mobile $successfully_deleted!"
                      echo
                    fi
                    main_menu
                    break
                    ;;
                  2)
                    clear
                    main_menu
                    break
                    ;;
                  3)
                    clear
                    main_menu
                    break
                    ;;
                  *)
                    error_select_menu 1
                    del_aik
                    break
                    ;;
                  esac
                done
                return
              }
              del_aik
              break
              ;;
            7)
              clear
              main_menu
              break
              ;;
            8)
              clear
              break
              ;;
            *)
              error_select_menu 1
              ;;
            esac
          done
        else
          echo
          echo ".....AIK-mobile $not_installed!"
          echo

          main_menu
          return
        fi
        return
      }
      my_aik
      break
      ;;
    3)
      clear

      my_system() {
        cd $local_dir/UnpackerSystem

        dir_dat=$binary_dir
        v=$(for a in $(busybox find . -maxdepth 1 -name '*.img' -type f | busybox sed 's!./!!'); do

          ext_check "$a"

          if [ $(echo $?) -eq 0 ]; then
            echo "$a"
          fi
        done)

        set -- $v

        if [ ! -z "$v" ]; then
          echo
          echo ".....$curent_folder: /$nd"
          echo ".....$sel_file_extract:"
          echo
          select menu in $v "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"
              let i=i+1
              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                file=/"$nd"/"$file"
                . ${dir_dat}/unpack_img
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                my_system
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              my_system
              return
              break
              ;;
            esac
          done
        else
          echo
          echo ".....$in_folder1: /$nd $no_images \".img\" $for_unpacking"
          echo
          main_menu
          return
        fi
        return
      }

      my_sin() {
        if [ ! -z "$(echo "$file" | busybox grep ".sin$")" ]; then

          name_sin="$(busybox basename ${file%.*})"

          sony_dump "$PWD" "$file"
          if [ $(echo $?) -eq 0 ]; then
            num="$(busybox find -maxdepth 1 | busybox grep -Ev ".sin$|.crt$|.img$|.log$" | busybox grep "$name_sin")"
            busybox mv -f "$num" "$name_sin"_sin.img && file=/"$nd"/"$name_sin"_sin.img

            ext_check "$file"

            if [ "$(echo $?)" -eq "0" ]; then

              . ${dir_dat}/unpack_img
            else
              echo
              echo ".....$conversion_completed_successfully!"
              echo ".....$file_received $file"
              echo
              echo "...$file_zero_or_unsuport_format!"
              echo
            fi
          fi
        else
          ext_check "$file"
          if [ "$(echo $?)" -eq "0" ]; then
            . ${dir_dat}/unpack_img
          else
            echo
            echo "...$file_zero_or_unsuport_format!"
            echo
          fi
        fi
        return
      }

      qqq() {
        free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
        free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
        echo "\033[33;1m...$in /${nd} $free: $free_space \033[0m"
        if [ "$free_space" != "$free_data" ]; then
          echo "\033[33;1m...$in /data $free: $free_data \033[0m"
        fi
        return
      }

      my_super() {
        dir_dat=$binary_dir
        if [ "$nd" == "$local_dir/UnpackerSystem" ]; then
          cd /"$nd" && echo "$nd" >"$dir_dat"/last.txt
        elif [ "$nd" == "$local_dir/UnpackerSuper" ]; then
          cd /"$nd" && echo "$nd" >"$dir_dat"/last.txt
        elif [ "$nd" == "$local_dir/UnpackerPayload" ]; then
          cd /"$nd" && echo "$nd" >"$dir_dat"/last.txt
        elif [ "$nd" == "$local_dir/UnpackerSystem/uka_backup" -a -d /"$nd" ]; then
          cd /"$nd" && echo "$nd" >"$dir_dat"/last.txt
        elif [ "$nd" == "$(busybox cat "$dir_dat"/last.txt 2>/dev/null)" -a -d /"$nd" ]; then
          cd /"$nd" && echo "$nd" >"$dir_dat"/last.txt
        fi

        echo
        echo ".....$image_search..."
        v=$(busybox find . -maxdepth 1 -name '*.img' -o -name '*.PARTITION' -type f -o -name '*.sin' -type f | busybox sed 's!./!!' | while read a; do

          ext_check $a

          if [ $(echo $?) -eq 0 ]; then
            echo "$a"
          fi
        done)

        set -- $v

        if [ ! -z "$v" -a "$PWD" == "/$nd" -a "$PWD" != "/" ]; then
          clear
          free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
          free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
          echo
          echo "...$curent_folder: /$nd"
          echo "...$in /${nd} $free: $free_space"
          if [ "$free_space" != "$free_data" ]; then
            echo "...$in /data $free: $free_data"
          fi

          echo
          echo ".....$sel_file_extract:"
          echo
          select menu in $v "$unpack_all_images" "$exit_main_menu" "$close_program"; do
            case $REPLY in
            [1-9]*)
              i="$#"
              j="$#"
              e="$#"
              let i=i+1
              let j=j+2
              let e=e+3
              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                file=/"$nd"/"$file"
                my_sin
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                for bin in "$@"; do
                  if [ ! -z "$(busybox hexdump -C -n 20000 /"$nd"/"$bin" | busybox grep -o "30 50 4c 41")" -a "$nd" == "$local_dir/UnpackerSuper" ]; then
                    echo
                    echo "\033[33;1m.....$missed_unboxing "$bin" \033[0m"
                    unset file
                    continue
                  else
                    file=/"$nd"/"$bin"
                  fi
                  my_sin
                  qqq
                done
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$j" ]; then
                clear
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$e" ]; then
                clear
                return
                break
              else
                error_select_menu 1
                my_super
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              my_super
              return
              break
              ;;
            esac
          done
        else
          echo
          echo ".....$in_folder1: /$nd $no_supported_images \".img\" $for_unpacking"
          echo
          main_menu
          return
        fi
        return
      }
      my_d() {
        cd
        echo
        echo "...$go_folder_where_files_located: \".img\", $for_example: cd /sdcard"
        read b && $b
        if [ $(echo $?) -eq 0 ]; then
          clear
          echo
          echo ".....$image_search..."

          dir_dat=$binary_dir
          nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!') && echo "$nd" >$binary_dir/last.txt
          v=$(for a in $(busybox find . -maxdepth 1 -name '*.img' -o -name '*.sin' -o -name '*.PARTITION' -type f -o -iname "*super" -type l | busybox sed 's!./!!'); do

            ext_check $a

            if [ $(echo $?) -eq 0 ]; then
              echo "$a"
            fi
          done)

          set -- $v

          if [ ! -z "$v" ]; then
            clear
            free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
            free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
            echo
            echo "...$curent_folder: /$nd"
            echo "...$in /${nd} $free: $free_space"
            if [ "$free_space" != "$free_data" ]; then
              echo "...$in /data $free: $free_data"
            fi
            echo
            echo ".....$sel_file_extract:"
            echo
            select menu in $v "$unpack_all_images" "$exit_main_menu" "$close_program"; do
              case $REPLY in
              [1-9]*)
                i="$#"
                j="$#"
                e="$#"
                let i=i+1
                let j=j+2
                let e=e+3
                file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                  clear
                  file=/"$nd"/"$file"

                  my_sin
                  main_menu
                  return
                  break
                elif [ "$REPLY" -eq "$i" ]; then
                  clear
                  for bin in "$@"; do
                    if [ ! -z "$(busybox hexdump -C -n 20000 /"$nd"/"$bin" | busybox grep -o "30 50 4c 41")" -a "$nd" == "$local_dir/UnpackerSuper" ]; then
                      echo
                      echo "\033[33;1m.....$missed_unboxing "$bin" \033[0m"
                      unset file
                      continue
                    else
                      file=/"$nd"/"$bin"
                    fi
                    my_sin
                    qqq
                  done
                  main_menu
                  return
                  break
                elif [ "$REPLY" -eq "$j" ]; then
                  clear
                  main_menu
                  return
                  break
                elif [ "$REPLY" -eq "$e" ]; then
                  clear
                  return
                  break
                else
                  error_select_menu 1
                  my_d
                  return
                  break
                fi
                break
                ;;
              *)
                error_select_menu 1
                my_d
                return
                break
                ;;
              esac
            done
          else
            echo
            echo ".....$in_folder1: /$nd $no_supported_images \".img\" $for_unpacking."
            echo
            main_menu
            return
          fi
          echo
        else
          echo
          echo ".....$error_enter_dir!"
          echo
          echo "$enter_directory_correctly!"
          echo
          my_d
          return
        fi
        return
      }
      my_new() {
        echo -en "\E[32;1m"
        echo
        echo "      $menu_03"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        select menu in "$unpacking .img $from_folder: $local_dir/UnpackerSystem" "$unpacking .img $from_folder: $local_dir/UnpackerSuper" "$unpacking .img $from_folder: $local_dir/UnpackerPayload" "$unpacking .img $from_folder: $local_dir/UnpackerSystem/uka_backup" "$unpacking .img $from_last_used_folder" "$enter_path_folder_with_image .img" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            nd="$local_dir/UnpackerSystem"
            my_super
            return
            main_menu
            return
            break
            ;;
          2)
            clear
            nd="$local_dir/UnpackerSuper"
            my_super
            return
            main_menu
            return
            break
            ;;
          3)
            clear
            nd="$local_dir/UnpackerPayload"
            my_super
            return
            main_menu
            return
            break
            ;;
          4)
            clear
            nd="$local_dir/UnpackerSystem/uka_backup"
            my_super
            return
            main_menu
            return
            break
            ;;
          5)
            clear
            last_dir="$(busybox cat $binary_dir/last.txt 2>/dev/null | busybox sed 's!^/!!')"
            if [ ! -z "$last_dir" -a -d /"$last_dir" ]; then
              nd="$last_dir"
              my_super
              return
              main_menu
              return
            else
              echo
              echo ".....$last_folder_not_defined!"
              echo
              main_menu
              return
            fi
            break
            ;;
          6)
            clear

            my_d
            return
            main_menu
            return
            break
            ;;
          7)
            clear
            main_menu
            break
            ;;
          8)
            clear
            return
            break
            ;;
          *)
            error_select_menu 1
            my_new
            break
            ;;
          esac
        done
        return
      }
      my_new
      break
      ;;
    4)
      clear
      my_mount() {
        cd $home_dir
        my_dir="$binary_dir"
        >$my_dir/mm
        >$my_dir/mm1
        >$my_dir/spars
        echo
        echo ".....$image_search..."

        obraz=$(
          a=$(busybox find "$home_dir" -maxdepth 1 -name '*.img' -type f | busybox sed "s!$home_dir!!")
          set -- $a

          for v in $a; do

            if [ "$(echo $v | busybox awk '{ print $3 }' | busybox grep "$v")" != "$(for i in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50; do
              loop=/dev/block/loop$i

              busybox losetup $loop 2>/dev/null | busybox grep "$v" | busybox awk '{ print $3 }'
            done)" ]; then

              zik=$(echo $v)
              zik1=$(echo $v | busybox sed "s!$home_dir!!" | busybox sed 's!.img!!')
              if [ "$home_dir" != $local_dir/UnpackerSystem/ ]; then
                echo "$zik $mount_in_folder: $local_dir/$zik1" >>$my_dir/mm1
              else
                echo "$zik $mount_in_folder: $local_dir/$zik1" >>$my_dir/mm
              fi
            else
              if [ -z "$(busybox hexdump -C -n 20000 "$v" | busybox grep '3a ff 26 ed')" ]; then
                if [ ! -z "$(busybox hexdump -C -n 2000 "$v" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" ]; then
                  echo $v
                else
                  echo $v >/dev/null
                fi
              else
                echo $v >>$my_dir/spars
              fi
            fi
          done
        )
        set -- $obraz

        if busybox test -s "$my_dir/mm" -o -s "$my_dir/mm1"; then
          clear
          echo
          echo
          echo "   $already_mount_in_folder: \"/$print_dir\""
          busybox cat $my_dir/mm
          busybox cat $my_dir/mm1
        else
          clear
          echo
          echo "   $no_mount_file_in_folder: \"/$print_dir\""
          echo
        fi

        if busybox test -s "$my_dir/spars"; then
          echo
          echo "   $images sparse $in_folder11 /$print_dir:"
          busybox cat $my_dir/spars
        fi

        if [ ! -z "$obraz" ]; then
          echo
          echo "   $available raw-$images1 $for_mounting. $select_file:"
          echo "---------------------------------------------------------"
          echo
          select menu in $obraz "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"
              let i=i+1
              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                if [ -z "$(busybox hexdump -C -n 20000 "$file" | busybox grep '3a ff 26 ed')" ]; then
                  if [ ! -z "$(busybox hexdump -C -n 2000 "$file" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" ]; then
                    a=$(echo $file | busybox sed -e 's!./!!; s!.img!!')

                    . $binary_dir/my_mounting

                    busybox echo -ne "$local_dir/$a|" >>$binary_dir/papka.txt

                    main_menu
                    return
                  else
                    echo
                    echo
                    echo "   $file $is_not_image ext4."
                    main_menu
                    return
                    break
                  fi
                else
                  echo
                  echo
                  echo "   $file $is sparse-$image1. $to_mount_convert_to raw.img."
                  main_menu
                  return
                fi
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                my_mount
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              my_mount
              return
              break
              ;;
            esac
          done

        else
          echo
          echo "   $in_folder1: \"/$print_dir\" $no_files *.img, $available_for_mounting."
          echo
          main_menu
          return
        fi
        return
      }

      my_d() {
        cd
        echo
        echo "...$go_folder_where_files_located: \".img\", $for_example: cd /sdcard"
        read b && $b
        if [ $(echo $?) -eq 0 ]; then
          clear

          home_dir="$PWD/"
          print_dir="$(echo "$PWD" | busybox sed 's!^/!!')"

          my_mount
          return
        else
          echo
          echo ".....$error_enter_dir"
          echo
          echo "$enter_directory_correctly!"
          echo
          my_d
          return
        fi
        return
      }
      my10() {
        echo -en "\E[32;1m"
        echo
        echo "      $menu_04"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        select img in "$mount_image_from_folder: $local_dir/UnpackerSystem" "$enter_path_folder_with_image .img $for_mounting" "$unmount_image" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            home_dir="$local_dir/UnpackerSystem/"
            print_dir="$local_dir/UnpackerSystem"
            my_mount
            break
            ;;
          2)
            clear
            my_d
            break
            ;;
          3)
            clear
            sel_umount() {
              if [ -z "$file" ]; then
                clear
                main_menu
                return
              else
                clear
                . $binary_dir/my_unmounting
                check_mount
                if [ $(echo $?) -eq 0 ]; then
                  busybox rm -f $binary_dir/papka.txt
                fi
                main_menu
                return
              fi
              return
            }

            my_umount() {
              if busybox test -s $binary_dir/papka.txt; then
                p="$(busybox cat $binary_dir/papka.txt 2>/dev/null | busybox sed -e 's!|$!!; s!\+!\\+!')"

                b=$(busybox mount | busybox cut -d" " -f3 | busybox grep -E "$p") 2>/dev/null
              else
                unset b
              fi

              set -- $b

              if [ ! -z "$b" ]; then
                echo
                echo "     $select_folder_for_unmount:"
                echo
                select menu in $b "$exit_main_menu"; do
                  case $REPLY in
                  1)
                    file="$1"
                    clear
                    sel_umount
                    break
                    ;;
                  2)
                    file="$2"
                    clear
                    sel_umount
                    break
                    ;;
                  3)
                    file="$3"
                    clear
                    sel_umount
                    break
                    ;;
                  4)
                    file="$4"
                    clear
                    sel_umount
                    break
                    ;;
                  5)
                    file="$5"
                    clear
                    sel_umount
                    break
                    ;;
                  6)
                    file="$6"
                    clear
                    sel_umount
                    break
                    ;;
                  *)
                    clear
                    main_menu
                    break
                    ;;
                  esac
                done
              else
                echo
                echo "     $no_folder_for_unmount"
                main_menu
                return
              fi
              return
            }
            my_umount
            break
            my10
            break
            ;;
          4)
            clear
            main_menu
            break
            ;;
          5)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my10
      break
      ;;
    5)
      clear
      my3() {
        echo -en "\E[32;1m"
        echo
        echo "      $menu_05"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        select img in "$unpack .dat" "$unpack .dat $from_last_used_folder" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            cd
            echo
            echo "..$go_folder_where_files_located: \".dat\" и \".transfer.list\", $for_example: cd /sdcard"
            my_d() {
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                ndd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!') && echo "$ndd" >"$dir_dat"/last.txt
                v=$(busybox find . -maxdepth 1 -name '*.new.dat' 2>/dev/null | busybox sed 's!./!!')

                set -- $v

                if [ ! -z "$v" ]; then
                  free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  echo
                  echo "...$curent_folder: /$ndd"
                  echo "...$in /${ndd} $free: $free_space"
                  if [ "$free_space" != "$free_data" ]; then
                    echo "...$in /data $free: $free_data"
                  fi
                  echo
                  echo ".....$sel_file_extract:"
                  echo
                  select menu in $v "$exit_main_menu" "$close_program"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      j="$#"
                      let i=i+1
                      let j=j+2
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        . ${dir}/unpack_dat
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$j" ]; then
                        clear
                        return
                        break
                      else
                        error_select_menu 1
                        my3
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my3
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ".....$in_folder1 \"/$ndd\" $no_images \".dat\" $for_unpacking"
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo ".....$error_enter_dir!"
                echo
                echo "$enter_directory_correctly!"
                echo
                my_d
                return
              fi
              return
            }
            my_d
            break
            ;;
          2)
            clear
            my_last_dat() {
              v=$(busybox find . -maxdepth 1 -name '*.new.dat' 2>/dev/null | busybox sed 's!./!!')

              set -- $v

              if [ ! -z "$v" ]; then
                free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                echo
                echo "...$curent_folder: /$ndd"
                echo "...$in /${ndd} $free: $free_space"
                if [ "$free_space" != "$free_data" ]; then
                  echo "...$in /data $free: $free_data"
                fi
                echo
                echo ".....$sel_file_extract:"
                echo
                select menu in $v "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  [1-9]*)
                    i="$#"
                    j="$#"
                    let i=i+1
                    let j=j+2
                    file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                    if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                      clear
                      . ${dir}/unpack_dat
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$i" ]; then
                      clear
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$j" ]; then
                      clear
                      return
                      break
                    else
                      error_select_menu 1
                      my3
                      return
                      break
                    fi
                    break
                    ;;
                  *)
                    error_select_menu 1
                    my3
                    return
                    break
                    ;;
                  esac
                done
              else
                echo
                echo ".....$in_folder1 \"/$ndd\" $no_images \".dat\" $for_unpacking"
                echo
                main_menu
                return
              fi
              return
            }

            dir_dat=$binary_dir
            last_dir="$(busybox cat $binary_dir/last.txt 2>/dev/null | busybox sed 's!^/!!')"
            if [ ! -z "$last_dir" -a -d /"$last_dir" ]; then
              ndd="$last_dir"
              cd /"$ndd"
              my_last_dat
              return
            else
              echo
              echo ".....$last_folder_not_defined!"
              echo
              main_menu
            fi
            break
            ;;
          3)
            clear
            main_menu
            break
            ;;
          4)
            clear
            break
            ;;
          *)
            error_select_menu 1
            my3
            break
            ;;
          esac
        done
        return
      }
      my3
      break
      ;;
    6)
      clear
      my_br() {
        echo -en "\E[32;1m"
        echo
        echo "      $menu_06"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        select img in "$unpack .br" "$unpack .br $from_last_used_folder" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            cd
            echo
            echo "...$go_folder_where_files_located: \".br\" и \".transfer.list\", $for_example: cd /sdcard"
            my_b() {
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nb=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!') && echo "$nb" >"$dir_dat"/last.txt
                v=$(busybox find . -maxdepth 1 -name '*.new.dat.br' -type f 2>/dev/null | busybox sed 's!./!!')

                set -- $v

                if [ ! -z "$v" ]; then
                  free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  echo
                  echo "...$curent_folder: /$nb"
                  echo "...$in /${nb} $free: $free_space"
                  if [ "$free_space" != "$free_data" ]; then
                    echo "...$in /data $free: $free_data"
                  fi
                  echo
                  echo ".....$sel_file_extract:"
                  echo
                  select menu in $v "$exit_main_menu" "$close_program"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      j="$#"
                      let i=i+1
                      let j=j+2
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        . ${dir}/unpack_br
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$j" ]; then
                        clear
                        return
                        break
                      else
                        error_select_menu 1
                        my_br
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my_br
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."$in_folder1 \"/$nb\" $no_images \".br\" $for_unpacking"
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                my_b
                return
              fi
              return
            }
            my_b
            break
            ;;
          2)
            clear
            my_last_br() {

              v=$(busybox find . -maxdepth 1 -name '*.new.dat.br' -type f 2>/dev/null | busybox sed 's!./!!')

              set -- $v

              if [ ! -z "$v" ]; then
                free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                free_data="$(busybox df -h /data | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                echo
                echo "...$curent_folder: /$nb"
                echo "...$in /${nb} $free: $free_space"
                if [ "$free_space" != "$free_data" ]; then
                  echo "...$in /data $free: $free_data"
                fi
                echo
                echo ".....$sel_file_extract:"
                echo
                select menu in $v "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  [1-9]*)
                    i="$#"
                    j="$#"
                    let i=i+1
                    let j=j+2
                    file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                    if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                      clear
                      . ${dir}/unpack_br
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$i" ]; then
                      clear
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$j" ]; then
                      clear
                      return
                      break
                    else
                      error_select_menu 1
                      my_br
                      return
                      break
                    fi
                    break
                    ;;
                  *)
                    error_select_menu 1
                    my_br
                    return
                    break
                    ;;
                  esac
                done
              else
                echo
                echo ....."$in_folder1 \"/$nb\" $no_images \".br\" $for_unpacking"
                echo
                main_menu
                return
              fi
            }

            dir_dat=$binary_dir
            last_dir="$(busybox cat $binary_dir/last.txt 2>/dev/null | busybox sed 's!^/!!')"
            if [ ! -z "$last_dir" -a -d /"$last_dir" ]; then
              nb="$last_dir"
              cd /"$nb"
              my_last_br
              return
            else
              echo
              echo ".....$last_folder_not_defined!"
              echo
              main_menu
            fi
            break
            ;;
          3)
            clear
            main_menu
            break
            ;;
          4)
            clear
            break
            ;;
          *)
            error_select_menu 1
            my_br
            break
            ;;
          esac
        done
        return
      }
      my_br
      break
      ;;
    7) #Сборка .img начало +++++++++++++++++

      dir=$binary_dir
      cd $local_dir/UnpackerSystem

      check_d() {
        for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            return 0
          fi
        done
        return
      }

      pack_img_my() {
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size=111
                set -- $size
                file_size=${dir}/pack_img
                if [ -f ./"$config"/"$pack_d"*_avb.img ]; then
                  file_sh=./"$config"/"$pack_d"*_pack_avb_sparse.sh
                else
                  file_sh=./"$config"/"$pack_d"*_pack_sparse.sh
                fi
                if [ "$size_add" == "1" ]; then
                  my_size_add
                else
                  my_size
                fi
                return
                break
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_my
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_my
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders_available!"
          echo
          main_menu
          return
        fi
        return
      }

      pack_img_orig() {
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size=100
                . ${dir}/pack_img
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_orig
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_orig
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders."
          echo
          main_menu
          return
        fi
        return
      }

      pack_img_raw_orig() {
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size=100
                . ${dir}/pack_img_raw
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_raw_orig
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_raw_orig
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders."
          echo
          main_menu
          return
        fi
        return
      }

      pack_img_raw_my() {
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size=111
                set -- $size
                file_size=${dir}/pack_img_raw
                if [ -f ./"$config"/"$pack_d"_avb.img ]; then
                  file_sh=./"$config"/"$pack_d"_pack_avb.sh
                else
                  file_sh=./"$config"/"$pack_d"_pack.sh
                fi
                if [ "$size_add" == "1" ]; then
                  my_size_add
                else
                  my_size
                fi
                return
                break
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_raw_my
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_raw_my
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders_available."
          echo
          main_menu
          return
        fi
        return
      }

      pack_img_raw_new() {
        free_place
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size_orig="$(busybox expr $(busybox du -s "$pack_d" | busybox awk '{ print $1 }') \* 1024)"
                size_real="$(busybox cat "$config"/"$pack_d"_size.txt)"
                if busybox test "$size_orig" -le "10485760"; then
                  get_add="8192"
                  check_size_img
                else
                  get_add="1048576"
                  check_size_img
                fi
                size=111
                set -- $size
                r_size="$size_new"
                set -- $r_size
                file_size=${dir}/pack_img_raw
                if busybox test -s ./"$config"/"$pack_d"*_avb.img; then
                  file_sh=./"$config"/"$pack_d"*_pack_avb.sh
                else
                  file_sh=./"$config"/"$pack_d"*_pack.sh
                  busybox sed -e "s!-l [0-9]*!-l "$r_size"!" $file_sh >"$config"/"$pack_d"_gsize.sh
                fi
                . $file_size
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_raw_new
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_raw_new
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders_available."
          echo
          main_menu
          return
        fi
        return
      }

      pack_img_new() {
        free_place
        b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
          if [ -f "config/"$a"/"$a"_file_contexts" ]; then
            echo "$a"
          fi
        done)

        set -- $b

        if [ ! -z "$b" ]; then
          echo
          echo ".....$select_build_folder:"
          echo
          select menu in $b "$exit_main_menu"; do
            case $REPLY in
            [1-9]*)
              i="$#"

              let i=i+1

              file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
              if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                clear
                pack_d="$file"
                config="config/$pack_d"

                size_orig="$(busybox expr $(busybox du -s "$pack_d" | busybox awk '{ print $1 }') \* 1024)"
                size_real="$(busybox cat "$config"/"$pack_d"_size.txt)"
                if busybox test "$size_orig" -le "10485760"; then
                  get_add="8192"
                  check_size_img
                else
                  get_add="1048576"
                  check_size_img
                fi
                size=111
                set -- $size
                r_size="$size_new"
                set -- $r_size
                file_size=${dir}/pack_img
                if busybox test -s ./"$config"/"$pack_d"*_avb.img; then
                  file_sh=./"$config"/"$pack_d"*_pack_avb_sparse.sh
                else
                  file_sh=./"$config"/"$pack_d"*_pack_sparse.sh
                  busybox sed -e "s!-l [0-9]*!-l "$r_size"!" $file_sh >"$config"/"$pack_d"_gsize.sh
                fi
                . $file_size
                main_menu
                return
                break
              elif [ "$REPLY" -eq "$i" ]; then
                clear
                main_menu
                return
                break
              else
                error_select_menu 1
                pack_img_new
                return
                break
              fi
              break
              ;;
            *)
              error_select_menu 1
              pack_img_new
              return
              break
              ;;
            esac
          done
        else
          clear
          echo
          echo ....."$in \"$PWD\" $no_build_folders_available."
          echo
          main_menu
          return
        fi
        return
      }
      my5() {
        clear
        check_d
        if [ $(echo $?) -eq 0 ]; then
        echo -en "\E[32;1m"
        echo
        echo "      $menu_07"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
          select img in "$build .img(sparse)" "$build .img(raw)" "$build super.img" "$write $in1 fs_config" "$build_folder_size_info" "$restoring_symlinks" "$exit_main_menu" "$close_program"; do
            case $REPLY in
            1)
              clear

              sparse_s() {
                echo
                select img in "$build .img(sparse) $with_original_size" "$build .img(sparse) $with_image_size_input" "$build .img(sparse) $with_build_folder_size" "$build .img(sparse)(erofs $in1 ext4)" "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  1)
                    clear
                    erof="0"
                    set -- $erof
                    nn
                    pack_img_orig
                    break
                    ;;
                  2)
                    clear
                    erof="0"
                    set -- $erof
                    nn
                    pack_img_my
                    break
                    ;;
                  3)
                    clear
                    erof="0"
                    set -- $erof
                    nn
                    pack_img_new
                    break
                    ;;
                  4)
                    clear
                    if [ ! -z "$(getprop ro.product.cpu.abilist64)" ]; then
                      erof="1"
                      set -- $erof
                      nn
                      mkdir $local_dir/UnpackerSystem/erofs 2>/dev/null
                      cd $local_dir/UnpackerSystem/erofs
                      pack_img_raw_new
                    else
                      echo
                      echo ".....$menu_item_operation: \"$build .img(raw)(erofs $in1 ext4\" $not_supported_on_32bit_firmware!"
                      echo
                      main_menu
                    fi
                    break
                    ;;
                  5)
                    clear
                    main_menu
                    break
                    ;;
                  6)
                    clear
                    break
                    ;;
                  *)
                    error_select_menu 1
                    sparse_s
                    break
                    ;;
                  esac
                done
                return
              }
              sparse_s
              break
              ;;
            2)
              clear
              raw_s() {
                echo
                select img in "$build .img(sparse) $with_original_size" "$build .img(sparse) $with_image_size_input" "$build .img(sparse) $with_build_folder_size" "$build .img(sparse)(erofs $in1 ext4)" "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  1)
                    clear
                    nn
                    erof="0"
                    set -- $erof
                    pack_img_raw_orig
                    break
                    ;;
                  2)
                    clear
                    nn
                    erof="0"
                    set -- $erof
                    pack_img_raw_my
                    break
                    ;;
                  3)
                    clear
                    nn

                    erof="0"
                    set -- $erof
                    pack_img_raw_new
                    break
                    ;;
                  4)
                    clear
                    if [ ! -z "$(getprop ro.product.cpu.abilist64)" ]; then
                      nn
                      mkdir $local_dir/UnpackerSystem/erofs 2>/dev/null
                      cd $local_dir/UnpackerSystem/erofs
                      erof="1"
                      set -- $erof
                      pack_img_raw_new
                    else
                      echo
                      echo ".....$menu_item_operation: \"$build .img(raw)(erofs $in1 ext4\" $not_supported_on_32bit_firmware!"
                      echo
                      main_menu
                    fi
                    break
                    ;;
                  5)
                    clear
                    main_menu
                    break
                    ;;
                  6)
                    clear
                    break
                    ;;
                  *)
                    error_select_menu 1
                    raw_s
                    break
                    ;;
                  esac
                done
                return
              }
              raw_s
              break
              ;;
            3)
              clear
              echo
              echo ".....$check_necessary_images_folder $local_dir/UnpackerSuper"
              echo
              select img in "$build super.img(sparse)" "$build super.img(raw)" "$exit_main_menu" "$close_program"; do
                case $REPLY in
                1)
                  clear
                  spars=1
                  . $binary_dir/pack_super_img
                  main_menu
                  break
                  ;;
                2)
                  clear
                  spars=0
                  . $binary_dir/pack_super_img
                  main_menu
                  break
                  ;;
                3)
                  clear
                  main_menu
                  break
                  ;;
                4)
                  clear
                  break
                  ;;
                *) error_select_menu 2 ;;
                esac
              done
              break
              ;;
            4)
              clear
              echo
              echo ".....$add_folders_or_files_unpacked_image..."
              echo
              select img in "$write" "$exit_main_menu"; do
                case $REPLY in
                1)
                  clear
                  . $binary_dir/a_atr
                  break
                  ;;
                2)
                  clear
                  main_menu
                  break
                  ;;
                *) error_select_menu 2 ;;
                esac
              done
              break
              ;;
            5)
              clear
              cd $local_dir/UnpackerSystem
              size_papka() {
                b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
                  if [ -f "config/"$a"/"$a"_file_contexts" ]; then
                    echo "$a"
                  fi
                done)

                set -- $b

                if [ ! -z "$b" ]; then
                  echo
                  echo ".....$select_folder:"
                  echo
                  select menu in $b "$exit_main_menu" "$close_program"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      j="$#"
                      let i=i+1
                      let j=j+2
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        pack_d="$file"
                        config="config/$pack_d"

                        size_orig="$(busybox expr $(busybox du -s "$pack_d" | busybox awk '{ print $1 }') \* 1024)"
                        size_real="$(busybox cat "$config"/"$pack_d"_size.txt)"
                        if busybox test "$size_orig" -le "10485760"; then
                          get_size="0"
                          get_add="8192"
                          check_size_img
                        else
                          get_size="0"
                          get_add="1048576"
                          check_size_img
                        fi

                        size_real="$(busybox cat "$config"/"$pack_d"_size.txt)"
                        echo
                        echo "       -----------------------------"
                        echo "       -----------------------------"
                        echo
                        echo ".....$current_build_image_size:"
                        echo "     $size_real $byte"
                        echo
                        echo ".....$folder_size \"$pack_d\":"
                        echo "     $size_orig $byte"
                        echo
                        echo ".....$Approximate_minimum_size_with_image_built:"
                        echo "     $size_new $byte"
                        echo
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$j" ]; then
                        clear
                        return
                        break
                      else
                        error_select_menu 1
                        size_papka
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      size_papka
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."$in \"$PWD\" $no_build_folders."
                  echo
                  main_menu
                  return
                fi
                return
              }
              size_papka
              break
              ;;

            6)
              clear
              cd $local_dir/UnpackerSystem
              symlink() {
                b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
                  if [ -f "config/"$a"/"$a"_file_contexts" ]; then
                    echo "$a"
                  fi
                done)

                set -- $b

                if [ ! -z "$b" ]; then
                  echo
                  echo ".....$select_folder_restore:"
                  echo
                  select menu in $b "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"

                      let i=i+1

                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        pack_d="$file"
                        config="config/$pack_d"
                        if busybox test -s "$config"/"$pack_d"_sim.tar; then
                          busybox tar -xf "$config"/"$pack_d"_sim.tar
                          if [ $(echo $?) -eq 0 ]; then
                            echo
                            echo ".....$successfully_restored!"
                            echo
                          else
                            echo
                            echo ".....$recovery_error!"
                            echo
                          fi
                        else
                          echo
                          echo ".....$no_archive_restore!"
                          echo
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" -eq "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        symlink
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      symlink
                      return
                      break
                      ;;
                    esac
                  done
                else
                  clear
                  echo
                  echo ....."$in \"$PWD\" $no_folder_for_restore"
                  echo
                  main_menu
                  return
                fi
                return
              }
              symlink
              break
              ;;
            7)
              clear
              main_menu
              break
              ;;
            8)
              clear
              break
              ;;
            *) error_select_menu 2 ;;
            esac
          done
        else
          echo
          echo ....."$in \"$PWD\" $no_build_folders"
          echo
          main_menu
          return
        fi
        return
      }
      my5
      break
      ;;
      #Конец функции сборка .img

    8)
      clear
      my6() {
        file_size=${dir}/pack_img_dat
        check_dat="222"
        echo -en "\E[32;1m"
        echo
        echo "      $menu_08"
        echo "---------------------------------------------------------"
        echo
        echo -en "\E[37;1m"
        select img in "Собрать .img -> .dat" "Собрать .img с вводом размера -> .dat" "Собрать .img с размером папки для сборки -> .dat" "Конвертировать \".img\" в \".dat\"" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            erof="0"
            set -- $erof
            nn
            pack_dat
            break
            ;;
          2)
            clear
            erof="0"
            set -- $erof
            nn
            pack_dat_my
            break
            ;;
          3)
            clear
            erof="0"
            set -- $erof
            nn
            pack_dat_new
            break
            ;;
          4)
            clear
            my_k() {
              echo
              echo "..Перейдите в папку где находится файл \".img\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }')
                v=$(for sparse in $(busybox find . -maxdepth 1 -name '*.img' -type f 2>/dev/null); do
                  if [ ! -z "$(busybox hexdump -C -n 20000 "$sparse" | busybox grep -Eo '3a ff 26 ed|30 50 4c 41')" -o ! -z "$(busybox hexdump -C -n 2000 "$sparse" | busybox awk '/00000430/ { print $10$11 }' | busybox grep -o "53ef")" -o ! -z "$(busybox hexdump -C -n 2000 "$sparse" | busybox awk '/00000400/ { print $2$3$4$5 }' | busybox grep -o "e2e1f5e0")" ]; then
                    echo "$sparse"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл для конвертации в \".dat\":"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        br_check="false"
                        . ${dir_dat}/konvert_img_dat
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        my_k
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my_k
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"$nd\" нет образов \".img\" для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                my_k
                return
              fi
              return
            }
            my_k
            break
            ;;
          5)
            clear
            main_menu
            break
            ;;
          6)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my6
      break
      ;;
    9)
      clear
      my7() {
        file_size=${dir}/pack_img_br
        check_dat="222"
        echo
        echo "      Меню: Сборка и конвертация в .br"
        echo
        select img in "Собрать .img -> .br" "Собрать .img с вводом размера -> .br" "Собрать .img с размером папки для сборки -> .br" "Конвертировать .img в .br" "Конвертировать .dat в .br" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            erof="0"
            set -- $erof
            nn

            pack_dat
            break
            ;;
          2)
            clear
            erof="0"
            set -- $erof
            nn
            pack_dat_my
            break
            ;;
          3)
            clear
            erof="0"
            set -- $erof
            nn
            pack_dat_new
            break
            ;;
          4)
            clear
            my_imgbr() {
              echo
              echo "..Перейдите в папку где находится файл \".img\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }')
                v=$(for sparse in $(busybox find . -maxdepth 1 -name '*.img' -type f 2>/dev/null); do
                  if [ ! -z "$(busybox hexdump -C -n 20000 "$sparse" | busybox grep -Eo '3a ff 26 ed|30 50 4c 41')" -o ! -z "$(busybox hexdump -C -n 2000 "$sparse" | busybox awk '/00000430/ { print $10$11 }' | busybox grep -o "53ef")" -o ! -z "$(busybox hexdump -C -n 2000 "$sparse" | busybox awk '/00000400/ { print $2$3$4$5 }' | busybox grep -o "e2e1f5e0")" ]; then
                    echo "$sparse"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл для конвертации:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        br_check="true"
                        . ${dir_dat}/konvert_img_dat
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        my_imgbr
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my_imgbr
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"$nd\" нет образов \".img\" для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo ".....$error_enter_dir!"
                echo
                echo ".....$enter_directory_correctly!"
                echo
                my_imgbr
                return
              fi
              return
            }
            my_imgbr
            break
            ;;

          5)
            clear
            my_kbr() {
              echo
              echo "..Перейдите в папку где находится файл \".dat\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }')
                v=$(busybox find . -maxdepth 1 -name '*.new.dat' -type f 2>/dev/null | busybox sed 's!./!!')

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл для конвертации:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        . ${dir_dat}/konvert_dat_br
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        my_kbr
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      my_kbr
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"$nd\" нет образов \".dat\" для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo ".....$error_enter_dir!"
                echo
                echo ".....$enter_directory_correctly!"
                echo
                my_kbr
                return
              fi
              return
            }
            my_kbr
            break
            ;;
          6)
            clear
            main_menu
            break
            ;;
          7)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my7
      break
      ;;
    10)
      clear
      my8() {
        echo
        echo "      Меню: Конвертация sparse > raw; raw > sparse"
        echo
        select img in "Конвертировать .img(raw) в .img (sparse)" "Конвертировать .img(sparse) в .img(raw)" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            konv_img() {
              echo
              echo "..Перейдите в папку где находится файл \".img(raw)\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                v=$(for raw in $(busybox find -maxdepth 1 -name '*.img' -type f | busybox sed 's!./!!'); do
                  if [ -z "$(busybox hexdump -C -n 2000 "$raw" | busybox grep -E '3a ff 26 ed')" -a ! -z "$(busybox hexdump -C -n 2000 "$raw" | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" ]; then

                    echo "$raw"
                  elif [ -z "$(busybox hexdump -C -n 2000 "$raw" | busybox grep '3a ff 26 ed')" -a ! -z "$(busybox hexdump -C -n 20000 "$raw" | busybox grep "30 50 4c 41")" ]; then
                    echo "$raw"
                  elif [ -z "$(busybox hexdump -C -n 2000 "$raw" | busybox grep '3a ff 26 ed')" -a ! -z "$(busybox hexdump -C -n 2000 "$raw" | busybox grep -o "e2 e1 f5 e0")" ]; then
                    echo "$raw"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo "...Находимся в папке: /$nd"
                  echo "...Показаны только \"raw\" образы"
                  free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  echo "...В /${nd} свободно: $free_space"
                  echo

                  echo ".....Выберите файл для конвертации в \"sparse\":"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        . ${dir_dat}/konvert_raw_sparse
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        konv_img
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      konv_img
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ..."В папке \"/$nd\" нет \"raw\" образов для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                konv_img
                return
              fi
              return
            }
            konv_img
            break
            ;;
          2)
            clear
            konv_img() {
              echo
              echo "..Перейдите в папку где находится файл \".img(sparse)\", например: cd /sdcard:"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                v=$(for sparse in $(busybox find . -maxdepth 1 -name '*.img' -type f 2>/dev/null); do
                  if [ ! -z "$(busybox hexdump -C -n 2000 "$sparse" | busybox grep '3a ff 26 ed')" ]; then
                    echo "$sparse"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo "...Находимся в папке: /$nd"
                  echo "...Показаны только \"sparse\" образы"
                  free_space="$(busybox df -h "$PWD" | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
                  echo "...В /${nd} свободно: $free_space"
                  echo
                  echo ".....Выберите файл для конвертации в \"raw\":"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        . ${dir_dat}/konvert_sparse_raw
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        konv_img
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      konv_img
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ..."В папке \"/$nd\" нет \"sparse\" образов для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                konv_img
                return
              fi
              return
            }
            konv_img
            break
            ;;
          3)
            clear
            main_menu
            break
            ;;
          4)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my8
      break
      ;;
    11)
      clear
      my2() {
        echo
        echo "      Меню: Прочие инструменты"
        echo

        select img in "Действия со структурой AVB" "Конвертация .sin -> .img" "Конвертировать .lz4" "Склеить образ из прошивки под Qfil" "Извлечение образов из payload.bin" "Извлечение образов из UPDATE.APP" "Создание образа из блока памяти текущей прошивки" "Распаковка(конвертация) .ozip" "Создание tar.md5" "Распаковка прошивок .img" "Распаковка прошивок .ofp" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            read_avb() {
              echo
              select img in "Патч vbmeta" "Просмотр структуры AVB файла" "Извлечение публичного ключа подписи AVB" "Создание своего ключа подписи AVB" "Подпись boot(recovery).img с выбором ключа" "$exit_main_menu" "$close_program"; do
                case $REPLY in
                1)
                  clear
                  vbmeta() {
                    echo
                    echo "..Перейдите в папку где находится файл \"vbmeta.img\", например: cd /sdcard"
                    read b && $b
                    if [ $(echo $?) -eq 0 ]; then
                      clear
                      nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')

                      v=$(for a in $(busybox find . -maxdepth 1 -name "*.img" -type f -o -name "vbmeta*" | busybox sed 's!./!!'); do

                        if [ ! -z "$(busybox hexdump -C -n 20 "$a" 2>/dev/null | busybox grep -o "41 56 42 30")" ]; then
                          echo "$a"
                        fi
                      done)

                      set -- $v

                      if [ ! -z "$v" ]; then
                        echo
                        echo ".....Выберите файл для патча:"
                        echo
                        select menu in $v "$exit_main_menu"; do
                          case $REPLY in
                          [1-9]*)
                            i="$#"
                            let i=i+1
                            file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                            if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                              clear
                              echo
                              echo ".....Ищем значения для патча..."

                              true_vb() {
                                tru="$(avbtool info_image --image "$file" | busybox awk '/Flags:/ NR == 1 {if($2 == 3) { print $2 }}')"
                                rolbak="$(avbtool info_image --image "$file" | busybox awk '/Rollback Index:/ NR == 1 {if($3 == 0) { print $3 }}')"
                                return
                              }
                              true_vb

                              if [ "$tru" != 3 -o "$rolbak" != 0 ]; then
                                real_nd="$(echo /"$nd" | busybox grep -o "/dev/block")"
                                if [ -z "$real_nd" ]; then

                                  file_name="$(echo "$file" | busybox sed 's!.img$!!')"
                                  file_orig="$file"
                                  file_path="${file_name}_path.img"
                                  busybox cp -f "$file_orig" "$file_path"
                                else
                                  file_orig="$file"
                                  file_path="$file"
                                fi

                                for vb in "78: 00000003" "74: 00000000" "7c: 00000000"; do
                                  echo "$vb" | $binary_dir/xxd -r - "$file_path"
                                done

                                if [ $(echo $?) -eq 0 ]; then
                                  file="$file_path"
                                  true_vb

                                  if [ "$tru" == 3 -a "$rolbak" == 0 ]; then
                                    if [ -z "$real_nd" ]; then
                                      echo
                                      echo ".....Успешно пропатчен /"$nd"/"$file_orig" -> /"$nd"/"$file_path""
                                      echo
                                    else
                                      echo
                                      echo ".....Успешно пропатчен /"$nd"/"$file_orig""
                                      echo
                                    fi
                                  else
                                    echo
                                    echo ".....Ошибка при патче /"$nd"/"$file""
                                    echo
                                  fi
                                fi
                              else
                                echo
                                echo ".....Файл /"$nd"/"$file" уже пропатчен!"
                                echo
                              fi
                              main_menu
                              return
                              break
                            elif [ "$REPLY" == "$i" ]; then
                              clear
                              main_menu
                              return
                              break
                            else
                              error_select_menu 1
                              vbmeta
                              return
                              break
                            fi
                            break
                            ;;
                          *)
                            error_select_menu 1
                            vbmeta
                            return
                            break
                            ;;
                          esac
                        done
                      else
                        echo
                        echo ....."В папке \"/$nd\" нет файлов \"vbmeta\" для патча."
                        echo
                        main_menu
                        return
                      fi
                      echo
                    else
                      echo
                      echo .....$error_enter_dir!
                      echo
                      echo $enter_directory_correctly!
                      echo
                      vbmeta
                      return
                    fi
                    return
                  }
                  vbmeta
                  break
                  ;;
                2)
                  clear
                  vbmeta_info() {
                    echo
                    echo "..Перейдите в папку где находится файл \"*.img\", например: cd /sdcard"
                    read b && $b
                    if [ $(echo $?) -eq 0 ]; then
                      clear
                      echo
                      echo ".....Поиск файлов..."
                      nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')

                      v=$(for a in $(busybox find -maxdepth 1 -name "*.img" -type f -o -name "vbmeta*" -o -type l | busybox sed 's!./!!'); do

                        if [ ! -z "$(busybox hexdump -C -n 20 "$a" 2>/dev/null | busybox grep -o "41 56 42 30")" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep '3a ff 26 ed')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep -o '41 4e 44 52 4f 49 44 21')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep -o 'e2 e1 f5 e0')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep -o '10 20 f5 f2 ')" ]; then
                          echo "$a"
                        fi
                      done)

                      set -- $v

                      if [ ! -z "$v" ]; then
                        clear
                        echo
                        echo ".....Выберите файл:"
                        echo
                        select menu in $v "$exit_main_menu"; do
                          case $REPLY in
                          [1-9]*)
                            i="$#"
                            let i=i+1
                            file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                            if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then

                              t="     Файл: /$nd/$file"
                              g=${#t}
                              ggg="$(busybox expr "$g" - 6)"
                              gg="$(busybox seq -s- "$ggg" | busybox tr -d '[:digit:]')"
                              clear
                              echo
                              echo
                              echo "    $gg"
                              echo "$t"
                              echo "    $gg"
                              echo
                              f_avb=$binary_dir/avb.txt
                              avbtool info_image --image "$file" &>"$f_avb"
                              if [ ! -z "$(busybox cat "$f_avb" | busybox grep -o "Minimum libavb version:")" ]; then
                                busybox cat "$f_avb"
                              else
                                echo "     Структура AVB не найдена!"
                              fi
                              echo
                              echo "    $gg"
                              echo
                              busybox rm -f "$f_avb"
                              main_menu
                              return
                              break
                            elif [ "$REPLY" == "$i" ]; then
                              clear
                              main_menu
                              return
                              break
                            else
                              error_select_menu 1
                              vbmeta_info
                              return
                              break
                            fi
                            break
                            ;;
                          *)
                            error_select_menu 1
                            vbmeta_info
                            return
                            break
                            ;;
                          esac
                        done
                      else
                        echo
                        echo ....."В папке \"/$nd\" нет файлов \"*.img\""
                        echo
                        main_menu
                        return
                      fi
                      echo
                    else
                      echo
                      echo .....$error_enter_dir!
                      echo
                      echo $enter_directory_correctly!
                      echo
                      vbmeta_info
                      return
                    fi
                    return
                  }
                  vbmeta_info
                  break
                  ;;
                3)
                  clear
                  extract_key() {
                    echo
                    echo "..Перейдите в папку где находится файл \"*.img\", например: cd /sdcard"
                    read b && $b
                    if [ $(echo $?) -eq 0 ]; then
                      clear
                      echo
                      echo ".....Поиск файлов..."
                      nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')

                      v=$(for a in $(busybox find . -maxdepth 1 -name "*.img" -type f | busybox sed 's!./!!'); do

                        if [ ! -z "$(busybox hexdump -C -n 20 "$a" 2>/dev/null | busybox grep -o "41 56 42 30")" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep '3a ff 26 ed')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox awk '/00000430/ { print $10$11 }' | busybox grep "53ef")" -o ! -z "$(busybox hexdump -C -n 2000 "$a" 2>/dev/null | busybox grep -o '41 4e 44 52 4f 49 44 21')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" | busybox grep -o 'e2 e1 f5 e0')" -o ! -z "$(busybox hexdump -C -n 2000 "$a" | busybox grep -o '10 20 f5 f2 ')" ]; then
                          echo "$a"
                        fi
                      done)

                      set -- $v

                      if [ ! -z "$v" ]; then
                        clear
                        echo
                        echo ".....Выберите файл:"
                        echo
                        select menu in $v "$exit_main_menu"; do
                          case $REPLY in
                          [1-9]*)
                            i="$#"
                            let i=i+1
                            file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                            if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                              clear
                              . $binary_dir/extract_key

                              main_menu
                              return
                              break
                            elif [ "$REPLY" == "$i" ]; then
                              clear
                              main_menu
                              return
                              break
                            else
                              error_select_menu 1
                              extract_key
                              return
                              break
                            fi
                            break
                            ;;
                          *)
                            error_select_menu 1
                            extract_key
                            return
                            break
                            ;;
                          esac
                        done
                      else
                        echo
                        echo ....."В папке \"/$nd\" нет файлов \"*.img\""
                        echo
                        main_menu
                        return
                      fi
                      echo
                    else
                      echo
                      echo .....$error_enter_dir!
                      echo
                      echo $enter_directory_correctly!
                      echo
                      extract_key
                      return
                    fi
                    return
                  }
                  extract_key
                  break
                  ;;
                4)
                  clear
                  gen_key() {
                    v=$(echo "RSA2048" "RSA4096" "RSA8192")

                    set -- $v
                    echo
                    echo ".....Выберите алгоритм для создания ключа:"
                    echo
                    select menu in $v "$exit_main_menu"; do
                      case $REPLY in
                      [1-9]*)
                        i="$#"
                        let i=i+1
                        file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                        if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                          rs="$(echo "$file" | busybox sed 's!RSA!!')"
                          out_gen_key=$local_dir/UnpackerSystem/gen_keys
                          mkdir "$out_gen_key" 2>/dev/null
                          clear
                          echo
                          echo ".....Создание ключей ${file}_private.pem и "$file"_pubkey.pem..."

                          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:"$rs" -outform PEM -out "$out_gen_key"/"$file"_private.pem &>/dev/null
                          if [ $(echo $?) -eq 0 ]; then

                            echo
                            echo ".....Успешно создан "$file"_private.pem "
                            echo ".....Сохранено: "$out_gen_key"/"$file"_private.pem"

                            avbtool extract_public_key --key "$out_gen_key"/"$file"_private.pem --output "$out_gen_key"/"$file"_pubkey.pem
                            if [ $(echo $?) -eq 0 ]; then
                              sleep 1
                              echo
                              echo ".....Успешно создан "$file"_pubkey.pem"
                              echo ".....Сохранено: "$out_gen_key"/"$file"_pubkey.pem"
                              echo
                            fi
                          fi

                          main_menu
                          return
                          break
                        elif [ "$REPLY" == "$i" ]; then
                          clear
                          main_menu
                          return
                          break
                        else
                          error_select_menu 1
                          gen_key
                          return
                          break
                        fi
                        break
                        ;;
                      *)
                        error_select_menu 1
                        gen_key
                        return
                        break
                        ;;
                      esac
                    done
                    return
                  }
                  gen_key
                  break
                  ;;
                5)
                  clear
                  . image_sign
                  break
                  ;;
                6)
                  clear
                  main_menu
                  break
                  ;;
                7)
                  clear
                  break
                  ;;

                *)
                  error_select_menu 1
                  read_avb
                  return
                  break
                  ;;
                esac
              done
              return
            }
            read_avb
            break
            ;;

          2)
            clear

            sin_img() {
              echo
              echo "..Перейдите в папку где находится файл \".sin\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                v=$(busybox find . -maxdepth 1 -name '*.sin' 2>/dev/null | busybox sed 's!./!!')

                konv() {
                  echo
                  echo ".....Конвертация..."
                  echo
                  if [ ! -z "$(echo "$file" | busybox grep ".sin$")" ]; then

                    name_sin="$(busybox basename ${file%%.*})"

                    sony_dump "$PWD" "$file"
                    if [ $(echo $?) -eq 0 ]; then
                      num="$(busybox find -maxdepth 1 | busybox grep -Ev ".sin$|.crt$|.img$|.log$|.txt$" | busybox grep "$name_sin")"
                      busybox mv -f "$num" "$name_sin"_sin.img && file=/"$nd"/"$name_sin"_sin.img
                      echo
                      echo ".....Успешно завершено!"
                      echo ".....Получен файл $file"
                      echo
                    else
                      echo
                      echo ".....Error. Ошибка при конвертации!"
                      echo
                    fi
                  fi
                  return
                }

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        konv
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        sin_img
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      sin_img
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"/$nd\" нет файлов \".sin\"."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                sin_img
                return
              fi
              return
            }
            sin_img
            break
            ;;

          3)
            clear
            echo
            echo "      Меню: Конвертация .lz4"
            echo
            select img in "Извлечение из .lz4" "Сжатие в .lz4" "$exit_main_menu" "$close_program"; do
              case $REPLY in
              1)
                clear
                decomp_lz4() {
                  echo
                  echo "..Перейдите в папку где находится файл \".lz4\", например: cd /sdcard"
                  read b && $b
                  if [ $(echo $?) -eq 0 ]; then
                    clear
                    dir_dat=$binary_dir
                    nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                    v=$(busybox find . -maxdepth 1 -name '*.lz4' 2>/dev/null | busybox sed 's!./!!')

                    konv() {
                      echo
                      echo ".....Конвертация..."
                      echo
                      lz4 -df --no-sparse "$file"
                      if [ "$?" -eq "0" ]; then
                        echo
                        echo ".....Успешно завершено!"
                        echo
                        return
                      else
                        echo
                        echo ".....Ошибка при конвертации!"
                        echo
                        return
                      fi
                      return
                    }

                    set -- $v

                    if [ ! -z "$v" ]; then
                      echo
                      echo ".....Выберите файл для конвертации:"
                      echo
                      select menu in $v "$exit_main_menu"; do
                        case $REPLY in
                        [1-9]*)
                          i="$#"
                          let i=i+1
                          file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                          if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                            clear
                            konv
                            main_menu
                            return
                            break
                          elif [ "$REPLY" == "$i" ]; then
                            clear
                            main_menu
                            return
                            break
                          else
                            error_select_menu 1
                            decomp_lz4
                            return
                            break
                          fi
                          break
                          ;;
                        *)
                          error_select_menu 1
                          decomp_lz4
                          return
                          break
                          ;;
                        esac
                      done
                    else
                      echo
                      echo ....."В папке \"/$nd\" нет файлов \".lz4\" для конвертации."
                      echo
                      main_menu
                      return
                    fi
                    echo
                  else
                    echo
                    echo .....$error_enter_dir!
                    echo
                    echo $enter_directory_correctly!
                    echo
                    decomp_lz4
                    return
                  fi
                  return
                }
                decomp_lz4
                break
                ;;
              2)
                clear

                comp_lz4() {
                  echo
                  echo "..Перейдите в папку где находится файл \".img\", например: cd /sdcard"
                  read b && $b
                  if [ $(echo $?) -eq 0 ]; then
                    clear
                    dir_dat=$binary_dir
                    nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                    v=$(busybox find . -maxdepth 1 -name '*.img' 2>/dev/null | busybox sed 's!./!!')
                    konv() {
                      echo
                      echo ".....Конвертация..."
                      echo
                      lz4 -3 -f "$file"
                      if [ "$?" -eq "0" ]; then
                        echo
                        echo ".....Успешно завершено!"
                        echo
                        return
                      else
                        echo
                        echo ".....Ошибка при конвертации!"
                        echo
                        return
                      fi
                      return
                    }

                    my_compress() {
                      mc() {
                        read b
                        if [ "$b" -le "9" ]; then
                          echo
                          echo ".....Конвертация в "$file".lz4...Ждём..."
                          echo
                          lz4 -"$b" -f $file
                          if [ $(echo $?) -eq 0 ]; then
                            echo
                            echo ".....Конвертация завершена!"
                            echo
                          else
                            echo
                            echo ".....error: Ошибка при конвертации."
                            echo
                          fi
                        else
                          echo
                          echo ".....Вводите цифру от 0 до 9:"
                          mc
                          echo
                        fi
                        return
                      }

                      echo
                      echo ".....Для конвертации в .lz4 введите степень сжатия(цифру от 0 до 9):"
                      mc
                      return
                    }

                    set -- $v

                    if [ ! -z "$v" ]; then
                      echo
                      echo ".....Выберите файл для конвертации:"
                      echo
                      select menu in $v "$exit_main_menu"; do
                        case $REPLY in
                        [1-9]*)
                          i="$#"
                          let i=i+1
                          file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                          if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                            clear
                            my_compress
                            main_menu
                            return
                            break
                          elif [ "$REPLY" == "$i" ]; then
                            clear
                            main_menu
                            return
                            break
                          else
                            error_select_menu 1
                            comp_lz4
                            return
                            break
                          fi
                          break
                          ;;
                        *)
                          error_select_menu 1
                          comp_lz4
                          return
                          break
                          ;;
                        esac
                      done
                    else
                      echo
                      echo ....."В папке \"/$nd\" нет файлов \".img\" для конвертации."
                      echo
                      main_menu
                      return
                    fi
                    echo
                  else
                    echo
                    echo .....$error_enter_dir!
                    echo
                    echo $enter_directory_correctly!
                    echo
                    comp_lz4
                    return
                  fi
                  return
                }
                comp_lz4
                break
                ;;
              3)
                clear
                main_menu
                break
                ;;
              4)
                clear
                break
                ;;
              esac
            done
            break
            ;;
          4)
            clear

            resize_img() {
              blockcount=$(tune2fs -l ./$obraz | busybox awk '/Block count/ { print $3 }')
              size=$(stat -c %s ./$obraz)
              size_obraz=$(busybox expr $blockcount \* 4096)
              if [ -f ./$obraz ]; then
                busybox test "$size" -lt "$size_obraz"
                if [ "$?" -eq "0" ]; then
                  busybox truncate -s $size_obraz ./$obraz
                  echo " .....Получен образ \"$obraz\" с размером: $size_obraz байт."
                  echo ".....Сохранено в $local_dir/UnpackerQfil"
                else
                  echo " .....Получен образ \"$obraz\" с размером: $size байт."
                  echo ".....Сохранено в $local_dir/UnpackerQfil"
                fi
              fi
            }

            qfil_img() {
              free_space="$(busybox df -h $local_dir/UnpackerQfil | busybox tail -1 | busybox awk '{ print $(NF-2) }')"
              echo
              echo "     Положите в папку: $local_dir/UnpackerQfil все файлы \"super_xx|system_xx|vendor_xx|userdata_xx\" и все файлы \".xml\", начинающиеся на \"rawprogram*\", либо файлы  \"super|system|vendor.img_sparsechunk.*\"."
              echo
              echo "...В $local_dir/UnpackerQfil свободно: $free_space"
              echo
              select img in "Склеить" "$exit_main_menu" "$close_program"; do
                case $REPLY in
                1)
                  clear
                  cd $local_dir/UnpackerQfil
                  >qfil.log
                  if [ ! -z "$(busybox ls | busybox grep -E "system_|vendor_|userdata_|.xml|chunk")" ]; then

                    if [ ! -z "$(busybox ls *chunk* 2>/dev/null)" ]; then

                      echo
                      echo ".....Найдены файлы \"*sparsechunk*\""
                      echo
                      for name in "super" "system" "vendor" "product"; do
                        name1=$(find . -maxdepth 1 -name "${name}*chunk*" | sort -n | busybox grep -v "[0-9][0-9]")
                        name2=$(find . -maxdepth 1 -name "${name}*chunk*" | sort -n | busybox grep "[0-9][0-9]")
                        if [ ! -z "${name1}" ]; then
                          mkdir ./output 2>/dev/null
                          echo ".....Склейка ${name}_chunk.raw.img..."
                          simg2img ${name1} ${name2} ./output/${name}_chunk.raw.img
                          if [ "$?" -eq "0" ]; then
                            echo ".....Успешно создан файл ${name}_chunk.raw.img"
                            echo ".....Сохранено в $local_dir/UnpackerQfil/output"
                            echo
                          else
                            echo
                            echo ".....Ошибка при склейке ${name}_chunk.raw.img!"
                            echo
                          fi
                        fi
                      done
                    fi

                    for name in "super" "system" "vendor" "userdata"; do
                      obraz=$name.raw.img
                      busybox find -name "rawprogram*.xml" -exec busybox grep -rl "$name" {} \; | busybox sed 's!./!!' | while read a; do
                        if [ "$(busybox cat "$a" | busybox grep "$name" | busybox wc -l)" -ge "3" ]; then
                          echo "$a" >rab_file.txt
                        fi
                      done
                      rab_file="$(busybox cat rab_file.txt 2>/dev/null)"
                      if [ ! -z $rab_file ]; then
                        check_name="$(busybox cat $rab_file | busybox awk -v var="$name" -F"filename=" '$2 ~ var { print $2}' | busybox cut -d" " -f1 | busybox sed '1!d; s!"!!g')"
                        if [ -f ./$check_name ]; then
                          echo
                          echo ".....Найден файл ${rab_file}"
                          echo ".....Склейка $obraz c использованием файла $rab_file..."
                          python39 $binary_dir/bin_system/qfil1.py $local_dir/UnpackerQfil/"$rab_file" "$name"
                          if [ "$?" -eq "0" ]; then
                            obraz_real="$local_dir/UnpackerQfil/$obraz"
                            opla_r=$(busybox hexdump -C -n 20000 "$obraz_real" | busybox grep -o "30 50 4c 41")
                            sparse_super_r=$(busybox hexdump -C -n 20000 "$obraz_real" | busybox grep -o "3a ff 26 ed")
                            size_obraz_r="$(lpdump --slot=0 "$obraz_real" | busybox awk '/Size: / { print $2 }')"
                            if [ ! -z "$opla_r" -a -z "$sparse_super_r" ]; then
                              busybox truncate -s "$size_obraz_r" "$obraz_real"
                              if [ "$?" -eq "0" ]; then
                                echo
                                echo " .....Получен образ \"$obraz\" с размером: $size_obraz_r байт."
                                echo ".....Сохранено в $local_dir/UnpackerQfil"
                              else
                                echo
                                echo "Ошибка при корректировке размера $obraz"
                                echo
                              fi
                            else
                              resize_img
                            fi
                          else
                            echo ".....Возникла ошибка"
                            echo
                          fi
                        else
                          echo
                          echo ".....Нет файла \"$check_name\" в $local_dir/UnpackerQfil" >>qfil.log
                        fi
                      else
                        echo
                        echo ".....Нет нужного файла .xml в $local_dir/UnpackerQfil" >>qfil.log
                      fi
                    done
                  else
                    echo
                    echo ".....Нет файлов для склейки в $local_dir/UnpackerQfil"
                  fi
                  main_menu
                  break
                  ;;
                2)
                  clear
                  main_menu
                  break
                  ;;
                3)
                  clear
                  break
                  ;;
                *)
                  error_select_menu 1
                  qfil_img
                  break
                  ;;
                esac
              done
              return
            }
            qfil_img
            break
            ;;
          5)
            clear
            payload() {
              echo
              echo "         Извлечение из payload.bin     "
              echo
              echo "..Перейдите в папку где находится файл \"payload.bin\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')

                v=$(for a in $(busybox find . -maxdepth 1 -name '*.bin' -type f | busybox sed 's!./!!'); do

                  if [ ! -z "$(busybox hexdump -C -n 20 "$a" | busybox grep -o "43 72 41 55")" ]; then
                    echo "$a"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        echo
                        echo ".....Извлечение из /$nd/$file..."
                        echo
                        payload-dumper -c 8 -o $local_dir/UnpackerPayload "$file"
                        if [ $(echo $?) -eq 0 ]; then
                          echo
                          echo ".....Образы успешно извлечены!"
                          echo ".....Сохранено в $local_dir/UnpackerPayload!"
                          echo
                        else
                          echo
                          echo ".....Ошибка при извлечении!"
                          echo
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        payload
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      payload
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"/$nd\" нет файлов \".bin\" для извлечения образов."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                payload
                return
              fi
              return
            }
            payload
            break
            ;;

          6)
            clear
            update_app() {
              echo
              echo "         Извлечение из UPDATE.APP     "
              echo
              echo "..Перейдите в папку где находится файл \"*.app\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                v=$(for a in $(busybox find . -maxdepth 1 -iname '*.app' -type f | busybox sed 's!./!!'); do

                  if [ ! -z "$(busybox hexdump -C -n 100 "$a" | busybox grep -o "55 aa 5a a5")" ]; then
                    echo "$a"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        echo
                        echo ".....Извлечение из /$nd/$file..."
                        echo
                        python39 $binary_dir/bin_system/splitapp_v2.py -f "$file" -o $local_dir/UnpackerUpdateApp

                        if [ $(echo $?) -eq 0 ]; then
                          cd $local_dir/UnpackerUpdateApp
                          napp=$(busybox find -name "super_[0-9].img" -type f | sort -n)
                          if [ ! -z "$napp" ]; then
                            echo
                            echo ".....Склеиваем разбитый на части super.img..."
                            simg2img ${napp} super.raw.img
                            if [ $(echo $?) -eq 0 ]; then
                              echo
                              echo ".....Образы успешно извлечены!"
                              echo ".....Сохранено в $local_dir/UnpackerUpdateApp!"
                              echo
                            else
                              echo
                              echo ".....Ошибка при склеивании!"
                              echo
                            fi
                          else
                            echo
                            echo ".....Образы успешно извлечены!"
                            echo ".....Сохранено в $local_dir/UnpackerUpdateApp!"
                            echo
                          fi
                        else
                          echo
                          echo ".....Ошибка при извлечении!"
                          echo
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        update_app
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      update_app
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"/$nd\" нет файлов \".app\" для извлечения образов."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                update_app
                return
              fi
              return
            }
            update_app
            break
            ;;
          7)
            clear
            . $binary_dir/mmm
            return
            main_menu
            return
            break
            ;;
          8)
            clear
            my_ozip() {
              cd
              echo
              echo "...Перейдите в папку где находятся файлы: \".ozip\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                nd=$(echo $b | busybox awk '{ print $2 }')
                clear
                ss_ozip() {

                  v=$(for a in $(busybox find . -maxdepth 1 -name '*.ozip' -type f | busybox sed 's!./!!'); do
                    echo "$a"
                  done)

                  set -- $v
                  if [ ! -z "$v" ]; then
                    echo
                    echo ".....Выберите файл:"
                    echo
                    select menu in $v "$exit_main_menu"; do
                      case $REPLY in
                      [1-9]*)
                        i="$#"
                        let i=i+1
                        file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                        if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                          clear
                          echo
                          python39 $binary_dir/bin_system/ozipdecrypt.py "$file"
                          if [ $(echo $?) -eq 0 ]; then
                            echo
                            echo ".....Успешно завершено!"
                            echo
                          else
                            echo
                            echo ".....error: Возникла ошибка!"
                            echo
                          fi
                          main_menu
                          return
                          break
                        elif [ "$REPLY" -eq "$i" ]; then
                          clear
                          main_menu
                          return
                          break
                        else
                          error_select_menu 1
                          ss_ozip
                          return
                          break
                        fi
                        break
                        ;;
                      *)
                        error_select_menu 1
                        ss_ozip
                        return
                        break
                        ;;
                      esac
                    done
                  else
                    echo
                    echo ".....В папке \"$nd\" нет файлов \".ozip\"."
                    echo
                    main_menu
                    return
                  fi
                  return
                }
                ss_ozip
              else
                echo
                echo ".....$error_enter_dir!"
                echo
                echo "$enter_directory_correctly!"
                echo
                my_ozip
                return
              fi
              return
            }
            my_ozip
            break
            ;;
          9)
            clear

            comp_md5() {
              echo
              echo "         Создание tar.md5     "
              echo
              echo "..Перейдите в папку где находится файл \"*.img\" или \"*.zip\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                dir_dat=$binary_dir
                nd=$(echo $b | busybox awk '{ print $2 }')
                v=$(busybox find . -maxdepth 1 -name '*.img' -o -name '*.lz4' 2>/dev/null | busybox sed 's!./!!')

                set -- $v

                if [ ! -z "$v" ]; then
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        file_tar="$file".tar
                        file_name="$(echo "$file" | busybox sed 's!\.[^.]*$!!')"
                        busybox tar -cf "$file".tar "$file" && busybox md5sum "$file_tar" >>"$file_tar" && busybox mv "$file_tar" "$file_tar".md5
                        if [ $(echo $?) -eq 0 ]; then
                          echo
                          echo ".....Успешно создан файл: "$file_tar".md5"
                          echo
                        else
                          echo
                          echo ".....Ошибка при создании "$file_tar".md5!"
                          echo
                        fi
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        comp_md5
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      comp_md5
                      return
                      break
                      ;;
                    esac
                  done
                else
                  echo
                  echo ....."В папке \"$nd\" нет файлов \".img\" для конвертации."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                comp_md5
                return
              fi
              return
            }
            comp_md5
            break
            ;;
          10)
            clear

            rokchip_extract() {
              echo
              echo "         Распаковка прошивок .img     "

              rok_dir="$local_dir/UnpackerSystem"

              echo
              echo "..Перейдите в папку где находится файл прошивки \".img\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                echo
                echo ".....Поиск файлов..."

                v=$(for a in $(busybox find . -maxdepth 1 -name '*.img' -type f | busybox sed 's!./!!'); do

                  if [ "$(busybox hexdump -C -n 300 "$a" | busybox grep -Eo "52 4b 46 57 66|52 4b 41 46|49 4d 41 47 45 57 54 59|56 19 b5 27")" ]; then
                    echo "$a"
                  fi
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  clear
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        name_rok="$(echo "$file" | busybox sed 's!.img$!!')"

                        if [ -d "$rok_dir"/"$name_rok" -a "$rok_dir"/"$name_rok" != "$rok_dir"/ ]; then
                          echo
                          echo ".....Удаление старой папки: "$rok_dir"/"$name_rok""
                          busybox rm -rf "$rok_dir"/"$name_rok"

                        fi

                        if [ "$(busybox hexdump -C -n 20 /"$nd"/"$file" | busybox grep -Eo "52 4b 46 57 66|52 4b 41 46")" ]; then

                          echo
                          echo ".....Detected Magic Rockchip..."
                          echo
                          echo ".....Извлечение из /$nd/$file..."
                          echo
                          if [ ! -z "$(busybox hexdump -C -n 20 /"$nd"/"$file" | busybox grep -o "52 4b 46 57 66")" ]; then
                            busybox mkdir "$rok_dir"/"$name_rok" 2>/dev/null
                            echo "rkfwf" >"$rok_dir"/"$name_rok"/conf

                            busybox dd if="$file" of="$rok_dir"/"$name_rok"/tmpt bs=3000000 count=1 &>/dev/null
                            VER="$(busybox strings "$rok_dir"/"$name_rok"/tmpt | busybox awk -F"\:" '/FIRMWARE_VER/ { print $2 }' | busybox awk -F"\." '{!$3} {$(NF+1)=0;} { print $1"."$2"."$3 }')"
                            echo "rom_version: "$VER""
                            busybox rm -f "$rok_dir"/"$name_rok"/tmpt
                            img_unpack "$file" "$rok_dir"/"$name_rok"
                            if busybox test -s "$rok_dir"/"$name_rok"/update.img; then
                              cd "$rok_dir"/"$name_rok"
                              afptool -unpack update.img .
                              if busybox test -s "$(busybox find "$rok_dir"/"$name_rok" -name "parameter*" | busybox head -1)"; then
                                echo
                                echo ".....Образы успешно извлечены!"
                                echo ".....Сохранено в "$rok_dir"/"$name_rok""
                                echo
                              else
                                echo
                                echo ".....Error! Ошибка при извлечении!"
                                echo
                              fi
                            else
                              echo
                              echo ".....Error! Ошибка при извлечении, нет update.img!"
                              echo
                            fi

                          elif [ ! -z "$(busybox hexdump -C -n 20 /"$nd"/"$file" | busybox grep -o "52 4b 41 46")" ]; then
                            busybox mkdir "$rok_dir"/"$name_rok" 2>/dev/null
                            echo "rkaf" >"$rok_dir"/"$name_rok"/conf

                            busybox cp -f /"$nd"/"$file" "$rok_dir"/"$name_rok"/update.img
                            cd "$rok_dir"/"$name_rok"
                            afptool -unpack update.img .
                            if busybox test -s "$(busybox find "$rok_dir"/"$name_rok" -name "parameter*" | busybox head -1)"; then
                              echo
                              echo ".....Образы успешно извлечены!"
                              echo ".....Сохранено в "$rok_dir"/"$name_rok""
                              echo
                            else
                              echo
                              echo ".....Error! Ошибка при извлечении!"
                              echo
                            fi
                          fi

                          busybox rm -f update.img
                        elif [ "$(busybox hexdump -C -n 3000 /"$nd"/"$file" | busybox grep -o "49 4d 41 47 45 57 54 59")" ]; then
                          clear
                          echo
                          echo ".....Detected Magic Alwinner..."
                          echo
                          echo ".....Извлечение из /$nd/$file..."
                          echo
                          busybox cp -f /"$nd"/"$file" "$rok_dir"/"$file"
                          cd "$rok_dir"
                          awimage "$file"
                          if [ $(echo $?) -eq 0 ]; then
                            busybox mv -f /"$rok_dir"/"$name_rok".img.dump /"$rok_dir"/"$name_rok"
                            echo
                            echo ".....Образы успешно извлечены!"
                            echo ".....Сохранено в "$rok_dir"/"$name_rok""
                            echo
                            busybox rm -f "$file"
                          else
                            echo
                            echo ".....Error! Ошибка при извлечении!"
                            echo
                          fi

                        elif [ "$(busybox hexdump -C -n 3000 /"$nd"/"$file" | busybox grep -o "56 19 b5 27")" ]; then
                          clear
                          echo
                          echo ".....Detected Magic Amlogic..."
                          echo
                          echo ".....Извлечение из /$nd/$file..."
                          echo
                          busybox mkdir "$rok_dir"/"$name_rok" 2>/dev/null
                          aml_image_v2_packer -d /"$nd"/"$file" "$rok_dir"/"$name_rok"
                          if [ $(echo $?) -eq 0 ]; then
                            echo
                            echo ".....Образы успешно извлечены!"
                            echo ".....Сохранено в "$rok_dir"/"$name_rok""
                            echo
                          else
                            echo
                            echo ".....Error! Ошибка при извлечении!"
                            echo
                          fi
                        fi

                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        rokchip_extract
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      rokchip_extract
                      return
                      break
                      ;;
                    esac
                  done
                else
                  clear
                  echo
                  echo ....."В папке \"/$nd\" нет прошивок \".img\" для извлечения образов."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                rokchip_extract
                return
              fi
              return
            }

            rokchip_pack() {

              rok_dir="$local_dir/UnpackerSystem"
              cd "$rok_dir"
              b=$(for a in $(busybox find -maxdepth 1 ! -name "." -type d | busybox sed 's!./!!'); do
                if busybox test -s "$a"/platform.conf; then
                  echo "$a"
                fi
              done)

              set -- $b

              if [ ! -z "$b" ]; then
                echo
                echo ".....$select_build_folder:"
                echo
                select menu in $b "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  [1-9]*)
                    i="$#"
                    j="$#"
                    let i=i+1
                    let j=j+2
                    file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                    if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                      clear
                      name_rok=$file
                      if busybox test -s "$name_rok"/Image/parameter*; then
                        busybox cp -f "$name_rok"/Image/parameter.txt "$name_rok"/parameter
                        load="$(busybox grep "bootloader" "$name_rok"/package-file | busybox awk '{ print $2}')"
                        for r in "29" "30" "31" "32" "33"; do
                          rk_tmp="$(busybox cat "$name_rok"/parameter | busybox awk '/MACHINE:/ { print $2 }' | busybox grep -Eo '[0-9]{1,2}' | busybox head -1)"

                          if [ "$rk_tmp" == "$r" ]; then
                            rk_v="-rk$rk_tmp "
                          fi
                        done
                        if [ ! -z "$load" ]; then
                          clear
                          echo
                          echo ".....Сборка прошивки .img..."
                          echo
                          busybox sleep 2

                          afptool -pack "$name_rok" update.new.img
                          if [ $(echo $?) -eq 0 ]; then
                            echo "img_maker "$rk_v""$name_rok"/"$load" update.new.img "$outdir"/"$name_rok"_new.img" >pack.sh
                            chmod 755 ./pack.sh && ./pack.sh
                            if [ $(echo $?) -eq 0 ]; then
                              echo
                              echo ".....Успешно создан "$outdir"/"$name_rok"_new.img"
                              echo
                            else
                              echo
                              echo ".....Ошибка при сборке общего образа!"
                              echo
                            fi
                          else
                            echo
                            echo ".....Ошибка при сборке первичного образа!"
                            echo
                          fi
                        else
                          echo ".....Ошибка конфигурации!"
                        fi
                        busybox rm -f update.new.img pack.sh

                      elif busybox test -s "$name_rok"/image.cfg; then
                        echo
                        echo ".....Сборка прошивки .img..."
                        echo
                        busybox sleep 2
                        aml_image_v2_packer -r "$name_rok"/image.cfg "$rok_dir"/"$name_rok" "$outdir"/"$name_rok".new.img
                        if [ $(echo $?) -eq 0 ]; then
                          echo
                          echo ".....Успешно создан "$outdir"/"$name_rok"_new.img"
                          echo
                        else
                          echo
                          echo ".....Ошибка при сборке общего образа!"
                          echo
                        fi
                      fi
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$i" ]; then
                      clear
                      main_menu
                      return
                      break
                    elif [ "$REPLY" -eq "$j" ]; then
                      clear
                      return
                      break
                    else
                      error_select_menu 1
                      rokchip_pack
                      return
                      break
                    fi
                    break
                    ;;
                  *)
                    error_select_menu 1
                    rokchip_pack
                    return
                    break
                    ;;
                  esac
                done
              else
                echo
                echo ....."В \"$PWD\" нет папок для сборки."
                echo
                main_menu
                return
              fi
              return
            }

            menu_rok() {
              if [ ! -z "$(getprop ro.product.cpu.abilist64)" ]; then
                echo
                echo "         Распаковка прошивок .img     "
                echo
                select img in "Распаковать прошивку .img" "$exit_main_menu" "$close_program"; do
                  case $REPLY in
                  1)
                    clear
                    rokchip_extract
                    break
                    ;;
                  2)
                    clear
                    main_menu
                    break
                    ;;
                  3)
                    clear
                    break
                    ;;
                  *)
                    error_select_menu 1
                    echo
                    menu_rok
                    break
                    ;;
                  esac
                done
              else
                echo
                echo ".....Работа пункта меню: \"Перепаковка прошивок .img\" не поддерживается на 32-битной прошивке!"
                echo
                main_menu
              fi
              return
            }
            menu_rok
            break
            main_menu
            break
            ;;

          11)
            clear

            aa() {
              cd $local_dir/UnpackerSystem
              if busybox test -s "$m_name"/super_map.csv; then
                v="$(busybox cat "$m_name"/super_map.csv | busybox awk -F"," '! /nv_text/ { print $1"-"$2 }')"
              elif busybox test -s "$m_name"/ProFile.xml; then
                v="$(busybox cat "$m_name"/ProFile.xml | busybox awk -F'"' '/<nv id/ { print $2"-"$4 }')"
              fi
              set -- $v
              echo
              echo ".....Выберите регион для склейки super.raw.img:"
              echo
              select menu in $v "$exit_main_menu"; do
                case $REPLY in
                [1-9]*)
                  i="$#"
                  let i=i+1
                  file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                  if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                    if busybox test -s "$m_name"/super_map.csv; then
                      ddd="$(echo "$file" | busybox sed 's!-!,!')"
                      f_ext="$(busybox cat "$m_name"/super_map.csv | busybox grep "$ddd" | busybox awk -v a="$m_name" -F"," '! /nv_text/ { print a"/"$3" "a"/"$4" "a"/"$5 }')"

                    elif busybox test -s "$m_name"/ProFile.xml; then
                      f_ext="$(busybox cat "$m_name"/ProFile.xml | busybox awk -F'"' '/<nv id/ { print $2"-"$4" "$6" "$8" "$10 }' | busybox grep "$file" | busybox awk -v a="$m_name" '{ print a"/"$2" "a"/"$3" "a"/"$4 }')"
                    fi
                    f_out="super_"${file}".raw.img"
                    echo "simg2img "$f_ext" "$m_name"/"$f_out"" >pack.sh

                    clear
                    echo
                    echo ".....Склейка $f_out, Ждём..."
                    chmod 755 ./pack.sh && ./pack.sh
                    if [ $(echo $?) -eq 0 ]; then
                      echo
                      echo ".....Успешно завершено!"
                      echo
                      return
                    else
                      echo
                      echo ".....Ошибка при склеивании super.raw.img!"
                      echo
                      return
                    fi
                    return
                    break
                  elif [ "$REPLY" -eq "$i" ]; then
                    clear
                    return
                    break
                  else
                    error_select_menu 1
                    aa
                    return
                    break
                  fi
                  break
                  ;;
                *)
                  error_select_menu 1
                  aa
                  return
                  break
                  ;;
                esac
              done
              return
            }

            ofp() {

              m_name="$(busybox basename "$file" | busybox sed 's!.ofp$!!')"

              cd $local_dir/UnpackerSystem
              mkdir "$m_name" 2>/dev/null
              >super_simg
              echo
              echo ".....Извлечение образов из "$file""
              echo ".....Ждём..."
              echo
              python39 $binary_dir/bin_oppo_decrypt/ofp_mtk_decrypt.py "$file" "$m_name" 1>log.txt
              python39 $binary_dir/bin_oppo_decrypt/ofp_qc_decrypt.py "$file" /"$ofp_dir"/"$m_name" 1>>log.txt
              busybox cp -f log.txt "$m_name"/log.txt

              if [ ! -z "$(busybox cat log.txt | busybox grep -E "Files successfully|Done. Extracted")" ]; then
                echo
                echo ".....Образы успешно извлечены в $local_dir/UnpackerSystem/$m_name"
                echo
              else
                echo
                echo ".....Ошибка при извлечении!"
                echo
              fi

              check_sup="$(busybox cat log.txt | busybox awk '/super.[0-9]/ { print $2 }' | busybox sed 's!"!!g')"
              if [ ! -z "$check_sup" ]; then
                echo
                echo ".....Найден super.img, разбитый на части!"
                if [ "$check_pack" == "0" ]; then
                  echo "$check_sup" | while read a; do
                    f="$m_name/${a}"
                    if [ ! -z "$(echo "$a" | busybox grep ".img")" ]; then
                      echo -ne "$f " >>super_simg
                    else
                      echo -ne "${f}.img " >>super_simg
                    fi
                  done

                  echo
                  echo ".....Склеиваем super.raw.img! Ждём..."

                  echo "simg2img "$(busybox cat super_simg)"$m_name/super.raw.img" >super.sh
                  if [ ! -z "$(busybox cat super.sh | busybox awk '/super/ { print $2 }')" ]; then
                    chmod 755 super.sh && ./super.sh

                    if [ $(echo $?) -eq 0 ]; then
                      echo
                      echo ".....Успешно завершено!"
                      echo
                    else
                      echo
                      echo ".....Ошибка при склеивании super.raw.img!"
                      echo
                    fi
                  fi
                elif [ "$check_pack" == "1" -a -s "$m_name"/super_map.csv -o "$check_pack" == "1" -a -s "$m_name"/ProFile.xml ]; then
                  aa
                else
                  echo
                  echo ".....Нет файла для склейки по регионам!"
                  echo
                fi
              fi
              busybox rm -f super_simg super.sh log.txt pack.sh
              main_menu
              return
            }

            ofp_extract() {
              echo
              echo "         Распаковка прошивок .ofp     "

              ofp_dir="$local_dir/UnpackerSystem"

              echo
              echo "..Перейдите в папку где находится файл прошивки \".ofp\", например: cd /sdcard"
              read b && $b
              if [ $(echo $?) -eq 0 ]; then
                clear
                nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
                echo
                echo ".....Поиск файлов..."

                v=$(for a in $(busybox find . -maxdepth 1 -name '*.ofp' -type f | busybox sed 's!./!!'); do
                  echo "$a"
                done)

                set -- $v

                if [ ! -z "$v" ]; then
                  clear
                  echo
                  echo ".....Выберите файл:"
                  echo
                  select menu in $v "$exit_main_menu"; do
                    case $REPLY in
                    [1-9]*)
                      i="$#"
                      let i=i+1
                      file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
                      if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
                        clear
                        name_ofp="$(echo "$file" | busybox sed 's!.ofp$!!')"
                        file=/"$nd"/"$file"

                        if [ -d "$ofp_dir"/"$name_ofp" -a "$ofp_dir"/"$name_ofp" != "$ofp_dir"/ ]; then
                          echo
                          echo ".....Удаление старой папки: "$ofp_dir"/"$name_ofp""
                          busybox rm -rf "$ofp_dir"/"$name_ofp"
                        fi
                        ofp
                        return
                        main_menu
                        return
                        break
                      elif [ "$REPLY" == "$i" ]; then
                        clear
                        main_menu
                        return
                        break
                      else
                        error_select_menu 1
                        ofp_extract
                        return
                        break
                      fi
                      break
                      ;;
                    *)
                      error_select_menu 1
                      ofp_extract
                      return
                      break
                      ;;
                    esac
                  done
                else
                  clear
                  echo
                  echo ....."В папке \"/$nd\" нет прошивок \".ofp\" для извлечения образов."
                  echo
                  main_menu
                  return
                fi
                echo
              else
                echo
                echo .....$error_enter_dir!
                echo
                echo $enter_directory_correctly!
                echo
                ofp_extract
                return
              fi
              return
            }

            menu_ofp() {
              echo
              echo "         Распаковка прошивок .ofp     "
              echo
              select img in "Распаковать прошивку .ofp" "$exit_main_menu" "$close_program"; do
                case $REPLY in
                1)
                  clear
                  check_pack=1
                  ofp_extract
                  break
                  ;;
                2)
                  clear
                  main_menu
                  return
                  break
                  ;;
                3)
                  clear
                  break
                  ;;
                *)
                  error_select_menu 1
                  echo
                  menu_ofp
                  break
                  ;;
                esac
              done
              return
            }
            menu_ofp
            break
            main_menu
            break
            ;;
          12)
            clear
            main_menu
            break
            ;;
          13)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my2
      break
      ;;
    12)
      clear
      del_papka() {
        rm -rf $del
        mkdir $del
        chmod 755 $del

        echo
        echo " .....Выполнена очистка папки: $del"
        echo
        return
      }
      my9() {
        echo
        echo "      Меню: Очистка рабочих папок"
        echo
        echo -en "\E[31;47;1m"
        echo " Перед очисткой, переместите нужные файлы в другую папку! "
        echo -en "\E[37;0m"
        echo -en "\E[37;1m"
        echo
        select img in "Очистить папку: $local_dir/UnpackerSystem" "Очистить папку: $local_dir/UnpackerQfil" "Очистить папку: $local_dir/UnpackerContexts" "Очистить папку: $local_dir/UnpackerPayload" "Очистить папку: $local_dir/UnpackerSuper" "Очистить папку: $local_dir/UnpackerUpdateApp" "Очистить папку: $local_dir/UnpackerPreloader" "Очистить сразу все папки" "$exit_main_menu" "$close_program"; do
          case $REPLY in
          1)
            clear
            del=$local_dir/UnpackerSystem
            del_papka
            main_menu
            break
            ;;
          2)
            clear
            del=$local_dir/UnpackerQfil
            del_papka
            main_menu
            break
            ;;
          3)
            clear
            del=$local_dir/UnpackerContexts
            del_papka
            main_menu
            break
            ;;
          4)
            clear
            del=$local_dir/UnpackerPayload
            del_papka
            main_menu
            break
            ;;
          5)
            clear
            del=$local_dir/UnpackerSuper
            del_papka
            main_menu
            break
            ;;
          6)
            clear
            del=$local_dir/UnpackerUpdateApp
            del_papka
            main_menu
            break
            ;;
          7)
            clear
            del=$local_dir/UnpackerPreloader
            del_papka
            main_menu
            break
            ;;
          8)
            clear
            del_dir=$local_dir/Unpacker
            for del_all in "$del_dir"Contexts "$del_dir"System "$del_dir"Qfil "$del_dir"Payload "$del_dir"Super "$del_dir"UpdateApp "$del_dir"Preloader; do
              rm -rf $del_all
              mkdir $del_all
              chmod 755 $del_all
            done
            echo
            echo " .....Выполнена очистка всех рабочих папок."
            echo
            main_menu
            break
            ;;
          9)
            clear
            main_menu
            break
            ;;
          10)
            clear
            break
            ;;
          *) error_select_menu 2 ;;
          esac
        done
        return
      }
      my9
      break
      ;;
    13)
      clear
      del_unpack() {
        echo
        echo -en "\E[31;47;1m"
        echo "     Удалить \"Unpacker Kitchen for Android\" с телефона?     "
        echo -en "\E[37;0m"
        echo -en "\E[37;1m"
        echo
        select img in "Да" "Нет,выйти в главное меню"; do
          case $REPLY in
          1)
            clear
            if [ -d $local_dir/AIK-mobile ]; then
              $local_dir/AIK-mobile/cleanup.sh

              echo
              echo ".....Удаление AIK-mobile..."
              $local_dir/AIK-mobile/bin/aik --uninstall
              busybox mount -o rw,remount / 2>/dev/null
              busybox mount -o rw,remount /system 2>/dev/null
              busybox find $(echo $PATH | busybox sed 's!:! !g') -name 'aik' -type f -o -iname 'aik-mobile' -type d | busybox xargs busybox rm -rf 2>/dev/null
              busybox rm -rf $local_dir/AIK-mobile /data/adb/modules/aik-mobile 2>/dev/null
              if [ $(echo $?) -eq 0 ]; then
                echo
                echo ".....AIK-mobile удалён!"
                echo
              fi
            fi
            if [ -f $binary_dir/UninstallerUnpack.zip ]; then
              busybox mkdir /cache/recovery 2>/dev/null
              busybox chmod 755 /cache/recovery 2>/dev/null
              busybox cp -f $binary_dir/UninstallerUnpack.zip /cache/recovery/UninstallerUnpack.zip
              echo "install /cache/recovery/UninstallerUnpack.zip" >/cache/recovery/openrecoveryscript
              busybox chmod 755 /cache/recovery/openrecoveryscript 2>/dev/null
              echo
              echo
              echo -ne "        Перезагрузка через 5 сек      \r"
              sleep 1
              echo -ne "         ..... 5 .....                \r"
              sleep 1
              echo -ne "          .... 4 ....                 \r"
              sleep 1
              echo -ne "           ... 3 ...                  \r"
              sleep 1
              echo -ne "            .. 2 ..                   \r"
              sleep 1
              echo -ne "             . 1 .                    \r"
              sleep 1
              echo -ne "                                      \r"
              reboot recovery
            fi
            main_menu
            break
            ;;
          2)
            clear
            main_menu
            break
            ;;
          *)
            error_select_menu 1
            del_unpack
            break
            ;;
          esac
        done
        return
      }
      del_unpack
      break
      ;;
    14)
      clear
      select_lang
      break
      ;;
    15)
      clear
      break
      ;;
    *) error_select_menu 2 ;;
    esac
  done
  return
}
main_menu
