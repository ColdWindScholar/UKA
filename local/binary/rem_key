#!/system/bin/sh

#clear
key_r() {
  file="$1"
  file_key="$2"

    out_extract_key=$local_dir/UnpackerSystem

  if busybox test -s "$file"; then

    echo
            echo ".....$replacing_key..."
    echo

    #f_name="$(echo "$file" | busybox awk -F"." '{ print $1 }')"
    r="$(busybox basename $file)"

    f_name=${r%.*}

    #offset_avb="$(python39 /data/local/binary/bin_system/find_avb0.py "$file" "41564230" | busybox head -1)"

    #offset_avb="$(printf "%d\n" "$(bin_utils foffset "$file" "41564230" -1)")"

    offset_avb="$(bin_utils foffset "$file" "41564230" -1 true)"

    if busybox test ! -z "$offset_avb"; then

      size_magic="$(avbtool info_image --image "$file" | busybox awk '/Header Block:/ { print $3 }')"

      size_ayten="$(avbtool info_image --image "$file" | busybox awk '/Authentication Block:/ { print $3 }')"

      xxx="$(busybox expr "$offset_avb" \+ 64)"

      offset_key="$(busybox printf "%d\n" "0x""$(xxd -ps -s "$xxx" -l 8 "$file")")"

      xxx="$(busybox expr "$offset_avb" \+ 72)"

      size_key="$(busybox printf "%d\n" "0x""$(xxd -ps -s "$xxx" -l 8 "$file")")"

      size_new_key="$(busybox stat -c %s "$file_key")"
      real_offset_key_dec="$(busybox expr "$offset_avb" \+ "$size_magic" \+ "$size_ayten" \+ "$offset_key")"

      real_offset_key="$(printf "%x\n" "$real_offset_key_dec")"

      real_size_key="$(busybox expr "$real_offset_key_dec" \+ "$size_key")"

      if busybox test "$size_key" == "$size_new_key"; then

        sha11="$(avbtool info_image --image "$file" | busybox awk '/^Public key \(sha1\):/ { print $4}')"

        bin_utils writekey "$file" "$real_offset_key" -f "$file_key" &>/dev/null

        if [ $(echo $?) -eq 0 ]; then
          check_new_alg="$(avbtool info_image --image "$file" 2>/dev/null | busybox awk '/^Algorithm:/ { print $2 }')"

          sha12="$(avbtool info_image --image "$file" | busybox awk '/^Public key \(sha1\):/ { print $4}')"

          if [ ! -z "$sha11" -a ! -z "$sha12" ]; then
            echo ".....$in_faile "$file" $key_changed_successfully_on $file_key"
            echo
            echo ".....Algorithm: $check_new_alg"
            echo ".....Old sha1 public key: $sha11"
            echo ".....New sha1 public key: $sha12"
            echo
          else
                        echo ".....$error_change_key!"
            echo
          fi
        else
                   echo ".....$error_change_key!"
          echo
        fi
      else
        echo
        echo ".....$error_key_sizes_do_not_match"
        echo
      fi
    else
      echo
            echo ".....$error_not_found offset AVB0"
      echo
    fi
  else
    echo
        echo ".....$no_file_to_process!"
    echo
  fi
  busybox rm -f "$out_extract_key"/avb.img
  return
}

search_key() {
  #clear
  echo
    echo ".....Algorithm: $check_alg"
  echo
    echo ".....$go_folder_where_public_key_located: cd /sdcard"
  read b && $b
  if [ $(echo $?) -eq 0 ]; then
    clear
    nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
    echo
        echo ".....$finding_keys..."

    v=$(for a in $(busybox find -maxdepth 1 -size -8k -type f); do

      if [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 08 00")" -a "$check_alg" == "SHA256_RSA2048" ]; then
        echo "$a"
      elif [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 10 00")" -a "$check_alg" == "SHA256_RSA4096" ]; then
        echo "$a"
      elif [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 20 00")" -a "$check_alg" == "SHA256_RSA8192" ]; then

        echo "$a"

      fi
    done)

    set -- $v

    if [ ! -z "$v" ]; then
      clear
      echo
                echo ".....Algorithm: $check_alg"
      echo
            echo ".....$select_key:"
      echo
            select menu in $v "$exit_main_menu"; do
        case $REPLY in
        [1-9]*)
          i="$#"
          j="$#"
          let i=i+1
          let j=j+2
          file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
          if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
            clear
            name_key="$(echo "$file" | busybox sed 's!^\./!!')"
            file_key=/"$nd"/"$name_key"

            key_r "$file_real" "$file_key"
            return
            break
          elif [ "$REPLY" == "$i" ]; then
            clear
            #main_menu
            return
            break
          else
            clear
            echo
                        echo "      $anykey."
            search_key
            return
            break
          fi
          break
          ;;
        *)
          clear
          echo
                    echo "      $anykey"
          search_key
          return
          break
          ;;
        esac
      done
    else
      clear
      echo
            echo ....."$in_folder1 \"/$nd\" $no_matching_keys_to_sign."
      echo
      return
    fi
    echo
  else
    echo
        echo ".....$error_enter_dir!"
    echo
        echo ".....$enter_directory_correctly!"
    echo
    search_key
    return
  fi
  return
}

sel_img() {
  #clear
  echo
    echo "         $public_key_replacement     "

  echo
    echo "..$go_folder_where_files_located \".img\" $for_replacement, $for_example: cd /sdcard"
  read b && $b
  if [ $(echo $?) -eq 0 ]; then
    clear
    nds=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
    echo
        echo ".....$file_search..."

    v=$(for a in $(busybox find . -maxdepth 1 -name '*.img' -type f | busybox sed 's!./!!'); do
      #if [ ! -z "$(busybox hexdump -C -n 4500 "$a" 2> /dev/null | busybox grep -Eo '41 4e 44 52 4f 49 44 21|41 56 42 30 ')" ]; then
      echo "$a"
      #fi
    done)

    set -- $v

    if [ ! -z "$v" ]; then
      clear
      echo
            echo ".....$select_file:"
      echo
            select menu in $v "$exit_main_menu" "$close_program"; do
        case $REPLY in
        [1-9]*)
          i="$#"
          j="$#"
          let i=i+1
          let j=j+2
          file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
          if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
            clear
            file=/"$nds"/"$file"
            file_real="$file"
                        avb_dir=$local_dir/UnpackerSystem
            if busybox test "$(avbtool info_image --image "$file" 2>/dev/null)"; then

              avbtool info_image --image "$file" >"$avb_dir"/avb.img

              unset check_alg

              check_alg="$(busybox cat "$avb_dir"/avb.img 2>/dev/null | busybox awk '/^Algorithm:/ { print $2 }')"
              if busybox test "$check_alg" != "NONE" -a ! -z "$check_alg"; then

                #fi
                search_key
              else
                echo
                echo ".....$f_i_l_e: $file $not_signed!"
                echo
              fi
            else
              echo
              echo ".....$f_i_l_e: $file $has_no_structure AVB!"
              echo
            fi
                        busybox rm -f $local_dir/UnpackerSystem/avb.img
            main_menu
            return
            break
          elif [ "$REPLY" == "$i" ]; then
            clear
            main_menu
            return
            break
          elif [ "$REPLY" == "$j" ]; then
            clear
            return
            break
          else
            clear
            echo
                        echo "      $anykey."
            sel_img
            return
            break
          fi
          break
          ;;
        *)
          clear
          echo
                    echo "      $anykey."
          sel_img
          return
          break
          ;;
        esac
      done
    else
      clear
      echo
            echo ....."$in_folder1 \"/$nd\" $no_files \".img\" $for_signature."
      echo
      main_menu
      return
    fi
    echo
  else
    echo
        echo ".....$error_enter_dir"
    echo
        echo ".....$enter_directory_correctly!"
    echo
    sel_img
    return
  fi
  return
}
sel_img

busybox rm -f "$out_extract_key"/avb.img
unset xxx
